---
title: "ggplot2: Basics"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---


```{r}
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
```

```{r}
#| echo: false
#| message: false

library(jsonlite)
library(tidyverse)

get_gapminder <- function(repo = "https://github.com/open-numbers/ddf--gapminder--fasttrack",
                          keywords = "co2") {
  ## Get json
  ## Filter paths there
  ## use them for download directly

  path_json <- "/refs/heads/master/datapackage.json"
  raw_url <- gsub("github.com", "raw.githubusercontent.com", "https://raw.githubusercontent.com/open-numbers/ddf--gapminder--fasttrack")
  download.file(url = paste0(raw_url, path_json), destfile = "datapackage.json")

  json_data <- jsonlite::fromJSON("datapackage.json")

  csv_paths <- json_data$resources$path
  matched_paths <- csv_paths[str_detect(csv_paths, str_c(keywords, collapse = "|"))]

  if (length(matched_paths) == 0) {
    stop("No files matched the specified keywords.")
  }

  matched_paths_url <- paste0(raw_url, "/refs/heads/master/", matched_paths)

  merged_df <- read.csv(matched_paths_url[1])

  # Loop through and merge the rest
  if (length(matched_paths) > 1) {
    for (i in 2:length(matched_paths)) {
      message("Reading file: ", matched_paths_url[i])
      temp_df <- read_csv(matched_paths_url[i])

      merged_df <- full_join(merged_df, temp_df)
      rm(temp_df)
      gc()
    }
  }

  if (file.exists("datapackage.json")) {
    file.remove("datapackage.json")
  }

  return(merged_df)
}

gapminder_dat_full <- get_gapminder(keywords = c("pop--", "co2", "--geo--country"))
```



## {background-image="images/ggplot_art.png" background-size="1160px" background-position="15%"}

::: {.absolute right="0.5%" bottom="0.5%" style="font-size:0.25em; padding: 0.15em 0.15em; background-color: rgba(255, 255, 255 .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255 .5); border-radius: 2. 5px;"}

Bild von [Allison Horst](https://allisonhorst.com/r-packages-functions).
:::

## ggplot2: Das Paket

\

[ggplot2](https://ggplot2.tidyverse.org/) gehört zum [tidyverse](https://www.tidyverse.org/)

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

\

... kann aber natürlich auch seperat geladen werden:

```{r}
# install.packages("ggplot2")
library(ggplot2)
```

##  {background-image="images/babyfeet.jpg" background-size="1225px"}

::: {.absolute right="1.5%" top="1.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}
Erste Schritte.
:::


::: {.absolute right="0%" bottom="0%" style="font-size:0.25em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Foto von <a href="https://unsplash.com/de/@omarlopez1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Omar Lopez</a> auf <a href="https://unsplash.com/de/fotos/person-die-babyfusse-halt-vTknj2OxDVg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

## The Big picture


```{r}
#| output-location: column
#| code-line-numbers: "1|2,3|4"
```




## Komponenten

1. Daten.
2. [Aesthetic mapping]{.highlight} zwischen Daten und visuellen Eigenschaften.
3. [Layer(s)]{.highlight} zum rendern der Daten. 

## Die Daten

Wir nutzen Daten von [Gapminder](https://www.gapminder.org/data/).  

::: {.callout-note}
Gapminder sammelt diverse Indikatoren über viele Jahre aus allen Ländern weltweit, z.B. Lebenserwartung, GDP, CO2-Verbrauch und viele mehr. 
:::

Bekannt sind vor allem die [Bubble-Plots](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v2).

\

![](./images/bubbleplot.png){height="95%" }


## Die Daten

Zuerst schauen wir uns nur eins der Jahre genauer an, und zwar nur für die Länder im Datensatz:

```{r}
gapminder_dat <- gapminder_dat_full %>% 
  filter(time == "2020", !is.na(country)) 
```


# Einen ggplot bauen

## Start: `ggplot()`
```{r}
#| output-location: column

ggplot()
```


## 1. Daten

```{r}
#| output-location: column
ggplot(data = gapminder_dat)
```


## 2. Aesthetic mapping 

:::: {.columns}

::: {.column width="50%"}
\
\
\

Verknüpfen von Spalten im Datensatz mit [visuellen Eigenschaften]{.highlight}:

`mapping =  aes()`

:::

::: {.column width="50%"}

\

|Argument|Aesthetic|
|--------|---------|
|`x`       |x-Achse  |
|`y`       |y-Achse  |
|`color`   |Farbe    |
|`fill`    |Füllfarbe|
|`shape`   |Form     |
|`size`    |Größe    |
|`alpha`   |Transparenz|
|`group`  |Gruppe|

: Die wichtigsten Aestetics {.striped}

:::
::::

::: {.callout-tip}
[Umfangreicherer Überblick](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) über mögliche Aestethics. 
:::

## Aesthetic mapping: Achsen 

```{r}
#| output-location: column
#| code-line-numbers: "3"

ggplot(
  data = gapminder_dat,
  mapping = aes(x = pop, y = co2_cons)
)
```

## 3. Geometric Layers

:::: {.columns}

::: {.column width="50%"}
\
\
\

Verschiedene Layers ([geoms]{.highlight}) werden übereinandergelegt: 

```
  geom_<layer1>() + 
  geom_<layer2>() + 
  ...
```

:::

::: {.column width="50%"}

\

|Argument|Aesthetic|
|--------|---------|
|`geom_point()`       |Punkte  |
|`geom_line()`       |Linien|
|`geom_histogram()`   |Histogramm    |
|`geom_text()`    |Text|
|`geom_boxplot()`   |Boxplot|

: Die wichtigsten Layers {.striped}



:::
::::

::: {.callout-tip}
[Umfangreicherer Überblick](https://stulp.gmw.rug.nl/dataviz/ggplotgeoms.html) über mögliche Geoms.
:::

## Layers: Punkte

```{r}
#| output-location: column
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point()
```


## Mehr Aesthetics!
```{r}
#| output-location: column
#| code-line-numbers: "6"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons, 
    color = world_6region
  )
) +
  geom_point() 
```


## Mehr Layers!
```{r}
#| output-location: column
#| code-line-numbers: "10"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons, 
    color = world_6region
  )
) +
  geom_point() +
  geom_smooth()
```



## Aestetics als Mapping oder Setting

:::{ .columns}

::: {.column width="33%"}

### Für alle Layer

```{r}
#| code-line-numbers: "6"

ggplot(
  data = gapminder_dat,
  aes(
    x = pop,
    y = co2_cons,
    color = world_6region
  )
) +
  geom_point() +
  geom_smooth()
```
:::

::: {.column width="33%"}

### Für spezifische Layer
::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point(aes(color = world_6region)) +
  geom_smooth()
```
:::
:::
::: {.column width="33%"}


### Als Setting
::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point(color = "#F4BA02") +
  geom_smooth()
```
:::
:::
:::


## Labels
```{r}
#| output-location: column
#| code-line-numbers: "10,11,12,13,14,15"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Größere Bevölkerung führt zu mehr CO2-Ausstoß!",
    subtitle = "CO2-Ausstoß diverser Länder in 2020",
    x = "Bevölkerungzahl",
    y = "CO2-Ausstoß in Tonnen"
  )
```


## Style deinen Plot: Themes

```{r}
#| output-location: column
#| code-line-numbers: "16"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Größere Bevölkerung führt zu mehr CO2-Ausstoß!",
    subtitle = "CO2-Ausstoß diverser Länder in 2020",
    x = "Bevölkerungzahl",
    y = "CO2-Ausstoß in Tonnen"
  ) +
  theme_classic()
```



## Übung


## Abspeichern



## Farben 

https://questionsindataviz.com/2023/12/29/what-makes-a-truly-terrible-map/
