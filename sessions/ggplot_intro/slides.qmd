---
title: "ggplot2: Basics"
format: 
  letterbox-revealjs:
    code-block-height: 100px
---


```{r}
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
```

```{r}
#| echo: false
#| message: false

library(jsonlite)
library(tidyverse)

get_gapminder <- function(repo = "https://github.com/open-numbers/ddf--gapminder--fasttrack",
                          keywords = "co2") {
  ## Get json
  ## Filter paths there
  ## use them for download directly

  path_json <- "/refs/heads/master/datapackage.json"
  raw_url <- gsub("github.com", "raw.githubusercontent.com", "https://raw.githubusercontent.com/open-numbers/ddf--gapminder--fasttrack")
  download.file(url = paste0(raw_url, path_json), destfile = "datapackage.json")

  json_data <- jsonlite::fromJSON("datapackage.json")

  csv_paths <- json_data$resources$path
  matched_paths <- csv_paths[str_detect(csv_paths, str_c(keywords, collapse = "|"))]

  if (length(matched_paths) == 0) {
    stop("No files matched the specified keywords.")
  }

  matched_paths_url <- paste0(raw_url, "/refs/heads/master/", matched_paths)

  merged_df <- read.csv(matched_paths_url[1])

  # Loop through and merge the rest
  if (length(matched_paths) > 1) {
    for (i in 2:length(matched_paths)) {
      message("Reading file: ", matched_paths_url[i])
      temp_df <- read_csv(matched_paths_url[i])

      merged_df <- full_join(merged_df, temp_df)
      rm(temp_df)
      gc()
    }
  }

  if (file.exists("datapackage.json")) {
    file.remove("datapackage.json")
  }

  return(merged_df)
}

gapminder_dat_full <- get_gapminder(keywords = c("pop--", "co2"))
```



## {background-image="images/ggplot_art.png" background-size="1160px" background-position="15%"}

::: {.absolute right="0.5%" bottom="0.5%" style="font-size:0.25em; padding: 0.15em 0.15em; background-color: rgba(255, 255, 255 .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255 .5); border-radius: 2. 5px;"}

Bild von [Allison Horst](https://allisonhorst.com/r-packages-functions).
:::

## ggplot2: Das Paket

\

[ggplot2](https://ggplot2.tidyverse.org/) gehört zum [tidyverse](https://www.tidyverse.org/)

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

\

... kann aber natürlich auch seperat geladen werden:

```{r}
# install.packages("ggplot2")
library(ggplot2)
```

##  {background-image="images/babyfeet.jpg" background-size="1225px"}

::: {.absolute right="1.5%" top="1.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}
Erste Schritte.
:::


::: {.absolute right="0%" bottom="0%" style="font-size:0.25em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Foto von <a href="https://unsplash.com/de/@omarlopez1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Omar Lopez</a> auf <a href="https://unsplash.com/de/fotos/person-die-babyfusse-halt-vTknj2OxDVg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

## The Big picture


```{r}
#| output-location: column
#| code-line-numbers: "1|2,3|4"
```




## Komponenten

1. Daten.
2. [Aesthetic mapping]{.highlight} zwischen Daten und visuellen Eigenschaften.
3. [Layer(s)] zum rendern der Daten. 

## Die Daten

Wir nutzen Daten von [Gapminder](https://www.gapminder.org/data/).  
Gapminder sammelt diverse Indikatoren über viele Jahre aus allen Ländern weltweit, z.B. Lebenserwartung, GDP, CO2-Verbrauch und viele mehr.  
Bekannt sind vor allem die [Bubble-Plots](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v2).

\

![](./images/bubbleplot.png){height="95%" }


## Die Daten

Zuerst schauen wir uns nur eins der Jahre genauer an:

```{r}
gapminder_dat <- gapminder_dat_full %>% 
  filter(time == "2020")
```


# Einen ggplot bauen

## Start: `ggplot()`
```{r}
#| output-location: column

ggplot()
```


## Daten

```{r}
#| output-location: column
ggplot(data = gapminder_dat)
```


## Aesthetic mapping 

Um diese leere Leinwand zu befüllen, müssen wir die Daten mit den benötigten visuellen Eigenschaften verknüpfen: 

`mapping =  aes()`

Je nach Plot-Art sind verschiedene visuelle Eigenschaften möglich. Wichtig ist für uns jetzt erst einmal die Position, also x - und y-Achsen.  
Es kann hier aber z.B. auch die Farbe der Punkte in Agnhängikeit von Kategorien in den Daten geändert werden. 


## Aesthetic mapping: Achsen 

```{r}
#| output-location: column
#| code-line-numbers: "2,3"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
)
```

## Geometric Layers
ggplots sind aus verschiedenen Layern aufgebaut, die mithilfe eines `+` übereinander gelegt werden.  

`geom_`

## Layers

```{r}
#| output-location: column
#| code-line-numbers: "4"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point()
```

## Mehr Layers!
```{r}
#| output-location: column
#| code-line-numbers: "5"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth()
```

## Titel/Labels
```{r}
#| output-location: column
#| code-line-numbers: "6|7|8|9|10"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "x",
    subtitle = "x",
    x = "Bevölkerung",
    y = "CO2-Ausstoß"
  )
```


## Style deinen Plot: Themes

```{r}
#| output-location: column
#| code-line-numbers: "6|7|8|9|10"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "x",
    subtitle = "x",
    x = "Bevölkerung",
    y = "CO2-Ausstoß"
  ) +
  theme_classic()
```

## Übung


## Let's take a deeper dive
Hier dann nochmal genauer durchgehen - Was haben wir eigentlich gemacht. 
Nicht zu sehr in den Basics verlieren, auch schneller tiefer reingehen (scales, coord system ...)





## Abspeichern



## Farben 

https://questionsindataviz.com/2023/12/29/what-makes-a-truly-terrible-map/
