---
title: "ggplot2: Basics"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---


```{r}
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
```

```{r}
#| echo: false
#| message: false

library(jsonlite)
library(tidyverse)

get_gapminder <- function(repo = "https://github.com/open-numbers/ddf--gapminder--fasttrack",
                          keywords = "co2") {
  ## Get json
  ## Filter paths there
  ## use them for download directly

  path_json <- "/refs/heads/master/datapackage.json"
  raw_url <- gsub("github.com", "raw.githubusercontent.com", "https://raw.githubusercontent.com/open-numbers/ddf--gapminder--fasttrack")
  download.file(url = paste0(raw_url, path_json), destfile = "datapackage.json")

  json_data <- jsonlite::fromJSON("datapackage.json")

  csv_paths <- json_data$resources$path
  matched_paths <- csv_paths[str_detect(csv_paths, str_c(keywords, collapse = "|"))]

  if (length(matched_paths) == 0) {
    stop("No files matched the specified keywords.")
  }

  matched_paths_url <- paste0(raw_url, "/refs/heads/master/", matched_paths)

  merged_df <- read.csv(matched_paths_url[1])

  # Loop through and merge the rest
  if (length(matched_paths) > 1) {
    for (i in 2:length(matched_paths)) {
      message("Reading file: ", matched_paths_url[i])
      temp_df <- read_csv(matched_paths_url[i])

      merged_df <- full_join(merged_df, temp_df)
      rm(temp_df)
      gc()
    }
  }

  if (file.exists("datapackage.json")) {
    file.remove("datapackage.json")
  }

  return(merged_df)
}

gapminder_dat_full <- get_gapminder(keywords = c("pop--", "co2", "--geo--country"))
```



## {background-image="images/ggplot_art.png" background-size="1160px" background-position="15%"}

::: {.absolute right="0.5%" bottom="0.5%" style="font-size:0.25em; padding: 0.15em 0.15em; background-color: rgba(255, 255, 255 .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255 .5); border-radius: 2. 5px;"}

Bild von [Allison Horst](https://allisonhorst.com/r-packages-functions).
:::

## ggplot2: Das Paket

\

[ggplot2](https://ggplot2.tidyverse.org/) gehört zum [tidyverse](https://www.tidyverse.org/)

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

\

... kann aber natürlich auch seperat geladen werden:

```{r}
# install.packages("ggplot2")
library(ggplot2)
```

##  {background-image="images/babyfeet.jpg" background-size="1225px"}

::: {.absolute right="1.5%" top="1.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}
Erste Schritte.
:::


::: {.absolute right="0%" bottom="0%" style="font-size:0.25em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Foto von <a href="https://unsplash.com/de/@omarlopez1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Omar Lopez</a> auf <a href="https://unsplash.com/de/fotos/person-die-babyfusse-halt-vTknj2OxDVg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

# Einen ggplot bauen

## Komponenten

:::: {.columns}

::: {.column width="33%"}
### Daten

\
\

```{r}
#| echo: false

df <- data.frame(
  x = c(1, 2, 3, 4, 5, 2, 3, 4, 1.5, 4.5),
  y = c(2, 3, 2.5, 4, 3, 1, 1.5, 2, 4.5, 1),
  group = factor(c("A", "A", "A", "A", "A", "B", "B", "B", "C", "C")),
  size = c(4, 5, 6, 7, 8, 3, 4, 3, 5, 6),
  shape = factor(c("circle", "circle", "circle", "circle", "circle", 
                   "circle", "circle", "circle", "triangle", "triangle"))
)

head(df)
```

:::

::: {.column width="33%"}
### Aestetic mapping

```{r}
#| echo: false

# Plot
ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17)) +
  scale_color_manual(values = c("A" = "#1b9e77", "B" = "#7570b3", "C" = "#d95f02")) +

  # Curved annotation arrows (thicker)
  annotate("curve", x = 5.2, y = 3.5, xend = 5, yend = 3,
           curvature = -0.3, 
           arrow = arrow(length = unit(0.25, "cm")), 
           color = "black", size = 0.9) +
  annotate("text", x = 5.3, y = 3.6, label = "color aesthetic", 
           hjust = 0, size = 5, fontface = "bold") +

  annotate("curve", x = 3.5, y = 2.3, xend = 3, yend = 2.5,
           curvature = 0.3, 
           arrow = arrow(length = unit(0.25, "cm")), 
           color = "black", size = 0.9) +
  annotate("text", x = 3.6, y = 2.2, label = "size aesthetic", 
           hjust = 0, size = 5, fontface = "bold") +

  annotate("curve", x = 2.5, y = 4.8, xend = 1.5, yend = 4.5,
           curvature = -0.4, 
           arrow = arrow(length = unit(0.25, "cm")), 
           color = "black", size = 0.9) +
  annotate("text", x = 2.6, y = 4.9, label = "shape aesthetic", 
           hjust = 0, size = 5, fontface = "bold") +

  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  ) +
  xlim(0, 8)

```


:::

::: {.column width="33%"}
### Layers

```{r}
#| echo: false
#| eval: false

library(ggplot2)
library(camcorder)

gg_record(
  dir = here::here("ggplot_intro", "images"), # where to save the recording
  device = "png", # device to use to save images
  width = 2,      # width of saved image
  height = 3,     # height of saved image
  units = "in",   # units for width and height
  dpi = 300       # dpi to use when saving image
)

ggplot(df, aes(x = x, y = y)) +
  geom_point()


ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8)

ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17))

ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17)) +
  scale_color_manual(values = c("A" = "#1b9e77", "B" = "#7570b3", "C" = "#d95f02"))


ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17)) +
  scale_color_manual(values = c("A" = "#1b9e77", "B" = "#7570b3", "C" = "#d95f02")) +
  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  ) 

ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17)) +
  scale_color_manual(values = c("A" = "#1b9e77", "B" = "#7570b3", "C" = "#d95f02")) +
  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  ) +
  xlim(0, 8)

gg_playback(
  name = here::here("ggplot_intro", "images", "layers.gif"),
  first_image_duration = 2,
  last_image_duration = 2,
  frame_duration = 4
)

gg_stop_recording()

```

![](./images/layers.gif)

:::

::::


## Die Daten

Wir nutzen Daten von [Gapminder](https://www.gapminder.org/data/).  

::: {.callout-note}
Gapminder sammelt diverse Indikatoren aus allen Ländern weltweit, z.B. Lebenserwartung, GDP, CO2-Verbrauch und viele mehr. 
:::

Bekannt sind vor allem die [Bubble-Plots](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v2).

\

![](./images/bubbleplot.png){width=60% }


## Die Daten

Zuerst schauen wir uns nur eins der Jahre genauer an, und zwar nur für die Länder im Datensatz:

```{r}
gapminder_dat <- gapminder_dat_full %>% 
  filter(time == "2020", !is.na(country)) 
```


## Start: `ggplot()`
```{r}
#| output-location: column

ggplot()
```


## 1. Daten

```{r}
#| output-location: column
ggplot(data = gapminder_dat)
```


## 2. Aesthetic mapping 

:::: {.columns}

::: {.column width="50%"}
\
\
\

Verknüpfen von Spalten im Datensatz mit [visuellen Eigenschaften]{.highlight}:

`mapping =  aes()`

:::

::: {.column width="50%"}

\

|Argument|Aesthetic|
|--------|---------|
|`x`       |x-Achse  |
|`y`       |y-Achse  |
|`color`   |Farbe    |
|`fill`    |Füllfarbe|
|`shape`   |Form     |
|`size`    |Größe    |
|`alpha`   |Transparenz|
|`group`  |Gruppe|

: Die wichtigsten Aestetics {.striped}

:::
::::

::: {.callout-tip}
[Umfangreicherer Überblick](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) über mögliche Aestethics. 
:::

## Aesthetic mapping: Achsen 

```{r}
#| output-location: column
#| code-line-numbers: "3"

ggplot(
  data = gapminder_dat,
  mapping = aes(x = pop, y = co2_cons)
)
```

## 3. Geometric Layers

:::: {.columns}

::: {.column width="50%"}
\
\
\

Verschiedene Layers ([geoms]{.highlight}) werden übereinandergelegt: 

```
  geom_<layer1>() + 
  geom_<layer2>() + 
  ...
```

:::

::: {.column width="50%"}

\

|Argument|Aesthetic|
|--------|---------|
|`geom_point()`       |Punkte  |
|`geom_line()`       |Linien|
|`geom_histogram()`   |Histogramm    |
|`geom_text()`    |Text|
|`geom_boxplot()`   |Boxplot|

: Die wichtigsten Layers {.striped}



:::
::::

::: {.callout-tip}
[Umfangreicherer Überblick](https://stulp.gmw.rug.nl/dataviz/ggplotgeoms.html) über mögliche Geoms.
:::

## Layers: Punkte

```{r}
#| output-location: column
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point()
```


## Übung 1
Jetzt wisst ihr genug, um einen ersten eigenen Plot zu erstellen. 

- Beschreiben, was erstellt werden soll. Vielleicht ein anderer Plottyp? Oder eine andere Variable? 



## Mehr Aesthetics!
```{r}
#| output-location: column
#| code-line-numbers: "6"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons, 
    color = world_6region
  )
) +
  geom_point() 
```


## Mehr Layers!
```{r}
#| output-location: column
#| code-line-numbers: "10"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons, 
    color = world_6region
  )
) +
  geom_point() +
  geom_smooth()
```


## Übung 2
Probiert aus, wo in den ggplot-layers man die Farbe Ändern kann (es gibt 3 verschiedene Möglichkeiten, die sich alle unterschiedlich auf den Plot auswirken). 
Ziel: Nur die Punkte sollen farbig sein. Es soll dann nur eine geom-smooth für den gesamten Trend geben. 




## Aestetics als Mapping oder Setting

:::{ .columns}

::: {.column width="33%"}

### Für alle Layer

```{r}
#| code-line-numbers: "6"

ggplot(
  data = gapminder_dat,
  aes(
    x = pop,
    y = co2_cons,
    color = world_6region
  )
) +
  geom_point() +
  geom_smooth()
```
:::

::: {.column width="33%"}

### Für spezifische Layer
::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point(aes(color = world_6region)) +
  geom_smooth()
```
:::
:::
::: {.column width="33%"}


### Als Setting
::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point(color = "#F4BA02") +
  geom_smooth()
```
:::
:::
:::


## Labels
```{r}
#| output-location: column
#| code-line-numbers: "10,11,12,13,14,15"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Größere Bevölkerung führt zu mehr CO2-Ausstoß!",
    subtitle = "CO2-Ausstoß diverser Länder in 2020",
    x = "Bevölkerungzahl",
    y = "CO2-Ausstoß in Tonnen"
  )
```


## Style deinen Plot: Themes

```{r}
#| output-location: column
#| code-line-numbers: "16"

ggplot(
  data = gapminder_dat,
  mapping = aes(
    x = pop,
    y = co2_cons
  )
) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Größere Bevölkerung führt zu mehr CO2-Ausstoß!",
    subtitle = "CO2-Ausstoß diverser Länder in 2020",
    x = "Bevölkerungzahl",
    y = "CO2-Ausstoß in Tonnen"
  ) +
  theme_classic()
```

