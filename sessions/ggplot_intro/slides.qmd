---
title: "ggplot2: Basics"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---


```{r}
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
```

## {background-image="images/ggplot_art.png" background-size="1160px" background-position="15%"}

::: {.absolute right="0.5%" bottom="0.5%" style="font-size:0.25em; padding: 0.15em 0.15em; background-color: rgba(255, 255, 255 .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255 .5); border-radius: 2. 5px;"}

Bild von [Allison Horst](https://allisonhorst.com/r-packages-functions).
:::

## ggplot2: Das Paket

\

[ggplot2](https://ggplot2.tidyverse.org/) gehört zum [tidyverse](https://www.tidyverse.org/)

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

\

... kann aber natürlich auch seperat geladen werden:

```{r}
# install.packages("ggplot2")
library(ggplot2)
```

##  {background-image="images/babyfeet.jpg" background-size="1225px"}

::: {.absolute right="1.5%" top="1.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}
Erste Schritte.
:::


::: {.absolute right="0%" bottom="0%" style="font-size:0.25em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Foto von <a href="https://unsplash.com/de/@omarlopez1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Omar Lopez</a> auf <a href="https://unsplash.com/de/fotos/person-die-babyfusse-halt-vTknj2OxDVg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::


## Komponenten

:::: {.columns}

::: {.column width="33%"}
### Daten

\
\

```{r}
#| echo: false

df <- data.frame(
  x = c(1, 2, 3, 4, 5, 2, 3, 4, 1.5, 4.5),
  y = c(2, 3, 2.5, 4, 3, 1, 1.5, 2, 4.5, 1),
  group = factor(c("A", "A", "A", "A", "A", "B", "B", "B", "C", "C")),
  size = c(4, 5, 6, 7, 8, 3, 4, 3, 5, 6),
  shape = factor(c(
    "circle", "circle", "circle", "circle", "circle",
    "circle", "circle", "circle", "triangle", "triangle"
  ))
)

head(df)
```

:::

::: {.column width="33%"}
### Aestetic mapping

```{r}
#| echo: false

# Plot
ggplot(df, aes(x = x, y = y)) +
  geom_point(aes(color = group, size = size, shape = shape), alpha = 0.8) +
  scale_shape_manual(values = c(circle = 16, triangle = 17)) +
  scale_color_manual(values = c("A" = "#1b9e77", "B" = "#7570b3", "C" = "#d95f02")) +

  # Curved annotation arrows (thicker)
  annotate("curve",
    x = 5.2, y = 3.5, xend = 5, yend = 3,
    curvature = -0.3,
    arrow = arrow(length = unit(0.25, "cm")),
    color = "black", size = 0.9
  ) +
  annotate("text",
    x = 5.3, y = 3.6, label = "color aesthetic",
    hjust = 0, size = 5, fontface = "bold"
  ) +
  annotate("curve",
    x = 3.5, y = 2.3, xend = 3, yend = 2.5,
    curvature = 0.3,
    arrow = arrow(length = unit(0.25, "cm")),
    color = "black", size = 0.9
  ) +
  annotate("text",
    x = 3.6, y = 2.2, label = "size aesthetic",
    hjust = 0, size = 5, fontface = "bold"
  ) +
  annotate("curve",
    x = 2.5, y = 4.8, xend = 1.5, yend = 4.5,
    curvature = -0.4,
    arrow = arrow(length = unit(0.25, "cm")),
    color = "black", size = 0.9
  ) +
  annotate("text",
    x = 2.6, y = 4.9, label = "shape aesthetic",
    hjust = 0, size = 5, fontface = "bold"
  ) +
  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  ) +
  xlim(0, 8)
```


:::

::: {.column width="33%"}
### Layers

```{r}
#| echo: false
#| eval: false

library(ggplot2)
library(camcorder)

gg_record(
  dir = here::here("sessions", "ggplot_intro", "images", "camcorder"), # where to save the recording
  device = "png", # device to use to save images
  width = 5, # width of saved image
  height = 5, # height of saved image
  units = "in", # units for width and height
  dpi = 300 # dpi to use when saving image
)

ggplot(df, aes(x = x, y = y)) +
  geom_point()

ggplot(df, aes(x = x, y = y)) +
  geom_point() +
  geom_smooth()

ggplot(df, aes(x = x, y = y)) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  )

ggplot(df, aes(x = x, y = y)) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "ggplot2 Aesthetics",
    x = "x aesthetic",
    y = "y aesthetic"
  ) +
  theme_classic()

gg_playback(
  name = here::here("sessions" ,"ggplot_intro", "images", "layers.gif"),
  first_image_duration = 0.01,
  last_image_duration = 1,
  frame_duration = 1
)

gg_stop_recording()
```

![](./images/layers.gif)

:::
::::


## Die Daten

Wir nutzen Daten von [Gapminder](https://www.gapminder.org/data/).  

::: {.callout-note}
Gapminder sammelt diverse Indikatoren aus allen Ländern weltweit, z.B. Lebenserwartung, GDP, CO2-Verbrauch und viele mehr. 
:::

\

![](./images/bubbleplot.png){width=60% fig-align="center"}


## Die Daten

Zuerst schauen wir uns nur eins der Jahre genauer an:


```{r}
gapminder <- readRDS(here::here("data", "gapminder_dat.rds"))

gapminder_2019 <- gapminder %>%
  filter(time == 2019) %>%
  drop_na(gini, hapiscore_whr)
```


::: {.columns}
::: {.column width="50%"}
[Gini-Koeffizient]{.highlight}  

- 0 = perfekte Gleichheit (alle haben gleich viel)
- 100 = perfekte Ungleichheit (eine Person hat alles)
:::

::: {.column width="50%"}
[Happiness-Score]{.highlight} (Cantril-Leiter)

- 0 = Schlechtestest mögliche Leben.
- 100 = Bestmöglichstes Leben.

:::
:::

## Start: `ggplot()`
```{r}
#| output-location: column

ggplot()
```


## 1. Daten

```{r}
#| output-location: column
ggplot(data = gapminder_2019)
```


## 2. Aesthetic mapping 

:::: {.columns}

::: {.column width="60%"}
\
\
\

[Verknüpfen]{.highlight} von Spalten im Datensatz mit [visuellen Eigenschaften]{.highlight}:

```{r}
#| eval: false

mapping =  aes()
```
:::

::: {.column width="40%"}


|Argument|Aesthetic|
|--------|---------|
|`x`       |x-Achse  |
|`y`       |y-Achse  |
|`color`   |Farbe    |
|`fill`    |Füllfarbe|
|`shape`   |Form     |
|`size`    |Größe    |
|`alpha`   |Transparenz|
|`group`  |Gruppe|

: {.striped}

:::
::::

::: {.callout-tip}
[Umfangreicherer Überblick](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) über mögliche Aestethics. 
:::

## Aesthetic mapping: Achsen 

```{r}
#| output-location: column
#| code-line-numbers: "3"

ggplot(
  data = gapminder_2019,
  mapping = aes(x = gini, y = hapiscore_whr)
)
```

## 3. Geometric Layers

:::: {.columns}

::: {.column width="60%"}
\
\
\

Verschiedene Layers ([geoms]{.highlight}) werden übereinandergelegt: 

```{r}
#| eval: false
geom_point() + 
geom_line() + 
...
```
:::

::: {.column width="40%"}

\

|Argument|Aesthetic|
|--------|---------|
|`geom_point()`       |Punkte  |
|`geom_line()`       |Linien|
|`geom_histogram()`   |Histogramm    |
|`geom_text()`    |Text|
|`geom_boxplot()`   |Boxplot|

: {.striped}



:::
::::

\
\

::: {.callout-tip}
[Umfangreicherer Überblick](https://stulp.gmw.rug.nl/dataviz/ggplotgeoms.html) über mögliche Geoms.
:::

## Layers: Punkte

```{r}
#| output-location: column
#| code-line-numbers: "5"

ggplot(
  data = gapminder_2019,
  mapping = aes(x = gini, y = hapiscore_whr)
  ) +
  geom_point()
```


## 


::: {.panel-tabset}

### Übung

\
\

::: {.exercise}

Das reicht schon, um einen eigenen ersten Plot zu erstellen. 
Nutzt die `gapminder_2019` Daten und erstellt einen Scatterplot, der den Zusammenhang zwischen Happiness-Score (`hapiscore_whr`) und GDP pro Kopf (`gdp_pcap`) zeigt. 
Gibt es einen Zusammenhang? 


:::

### Lösung

```{r}
#| output-location: column

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gdp_pcap,
    y = hapiscore_whr
  )
) +
  geom_point()
```

Länder mit höherem pro-Kopf Einkommen haben tendenziell auch einen höheren Happiness-Score.

:::

## Mehr Aesthetics!
```{r}
#| output-location: column
#| code-line-numbers: "5"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gini, y = hapiscore_whr,
    color = world_4region
  )
) +
  geom_point()
```


## Mehr Layers!
```{r}
#| output-location: column
#| code-line-numbers: "6"

ggplot(
  data = gapminder_2019,
  mapping = aes(x = gini, y = hapiscore_whr, color = world_4region)
) +
  geom_point() +
  geom_smooth()
```


##

::: {.panel-tabset}

### Übung

\

::: {.exercise}
Probiert aus, wo in den ggplot-layers man die Farbe ändern kann (es gibt 3 verschiedene Möglichkeiten, die sich alle unterschiedlich auf den Plot auswirken).  
Ändert dafür unseren bisherigen Plot so, dass nur die Punkte farbig sind.  
Die Linie von `geom_smooth()` soll einfarbig werden. 


```{r}
#| eval: false

ggplot(
  data = gapminder_2019,
  mapping = aes(x = gini, y = hapiscore_whr, color = world_4region)
) +
  geom_point() +
  geom_smooth()
```

:::

### Lösung
```{r}
#| code-line-numbers: "5"
#| output-location: column

ggplot(
  data = gapminder_2019,
  mapping = aes(x = gini, y = hapiscore_whr)
) +
  geom_point(aes(color = world_4region)) +
  geom_smooth()
```

Wir ändern dafür die Aesthetics von global zu lokal, indem wir die color-Aesthetic nur in `geom_point()` definieren. 

::: 

## Aestetics als Mapping oder Setting

:::{ .columns}

::: {.column width="33%"}

[Für alle Layer]{.highlight}

```{r}
#| code-line-numbers: "6"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gdp_pcap,
    y = hapiscore_whr,
    color = world_4region)
) +
  geom_point() +
  geom_smooth()
```
:::

::: {.column width="33%"}

[Für spezifische Layer]{.highlight}

::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gini,
    y = hapiscore_whr
  )
) +
  geom_point(aes(color = world_4region)) +
  geom_smooth()
```
:::
:::
::: {.column width="33%"}


[Als Setting]{.highlight}

::: {.fragment}
```{r}
#| code-line-numbers: "8"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gini,
    y = hapiscore_whr
  )
) +
  geom_point(color = "#F4BA02") +
  geom_smooth()
```
:::
:::
:::


## Labels
```{r}
#| output-location: column
#| code-line-numbers: "10,11,12,13,14,15"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gini,
    y = hapiscore_whr
  )
) +
  geom_point(aes(color = world_4region)) +
  geom_smooth() +
  labs(
    title = "Ungleichheit = Un-Happiness?",
    subtitle = "Gini-Koeffizient und Happiness-Score in verschiedenen Ländern 2019",
    x = "Gini-Index",
    y = "Happiness-Score",
  )
```


## Style deinen Plot: Themes

```{r}
#| output-location: column
#| code-line-numbers: "16"

ggplot(
  data = gapminder_2019,
  mapping = aes(
    x = gini,
    y = hapiscore_whr
  )
) +
  geom_point(aes(color = world_4region)) +
  geom_smooth() +
  labs(
    title = "Ungleichheit = Un-Happiness?",
    subtitle = "Gini-Koeffizient und Happiness-Score in verschiedenen Ländern 2019",
    x = "Gini-Index",
    y = "Happiness-Score",
  ) +
  theme_bw()
```


::: {.callout-tip}
Eine Übersicht über Themes findet sich [hier](https://ggplot2.tidyverse.org/reference/ggtheme.html).
:::

## {background-image="images/penguins.jpg" background-size="1225px"}

::: {.absolute right="2.5%" top="12%" style="font-size:1.25em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255, .5); border-radius: 7.5px;"}
Das waren schon die Basics. Von hier aus haben wir einen guten Anfangspunkt, um die Welt der Grafiken ausführlicher zu erkunden. 
Aber erst einmal, [Pause]{.highlight}. 
:::

::: image-ref
- Foto von <a href="https://unsplash.com/de/@westbeach013?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Casey Allen</a> auf <a href="https://unsplash.com/de/fotos/afrikanische-pinguine-am-meeresufer-neben-felsbrocken-UjpEGHu8uNU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::


