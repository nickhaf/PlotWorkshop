---
title: "Was ist eine gute Grafik?"
format: 
  letterbox-revealjs:
    code-block-height: 650px
---


```{r}
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
source(here::here("src", "themes.R"))
source(here::here("src", "functions.R"))
```

```{r}
#| echo: false
#| message: false

library(jsonlite)
library(tidyverse)

get_gapminder <- function(repo = "https://github.com/open-numbers/ddf--gapminder--fasttrack",
                          keywords = "co2") {
  ## Get json
  ## Filter paths there
  ## use them for download directly

  path_json <- "/refs/heads/master/datapackage.json"
  raw_url <- gsub("github.com", "raw.githubusercontent.com", "https://raw.githubusercontent.com/open-numbers/ddf--gapminder--fasttrack")
  download.file(url = paste0(raw_url, path_json), destfile = "datapackage.json")

  json_data <- jsonlite::fromJSON("datapackage.json")

  csv_paths <- json_data$resources$path
  matched_paths <- csv_paths[str_detect(csv_paths, str_c(keywords, collapse = "|"))]

  if (length(matched_paths) == 0) {
    stop("No files matched the specified keywords.")
  }

  matched_paths_url <- paste0(raw_url, "/refs/heads/master/", matched_paths)

  merged_df <- read.csv(matched_paths_url[1])

  # Loop through and merge the rest
  if (length(matched_paths) > 1) {
    for (i in 2:length(matched_paths)) {
      message("Reading file: ", matched_paths_url[i])
      temp_df <- read_csv(matched_paths_url[i])

      merged_df <- full_join(merged_df, temp_df)
      rm(temp_df)
      gc()
    }
  }

  if (file.exists("datapackage.json")) {
    file.remove("datapackage.json")
  }

  return(merged_df)
}

gapminder_dat_full <- get_gapminder(keywords = c("pop--", "co2", "--geo--country"))

gapminder_dat <- gapminder_dat_full %>%
  filter(time == "2020", !is.na(country))
```


## 

![](./images/mcCandless.png)

::: image-ref
Darstellung von David McCandless in [Knowledge is Beautiful (2014)](https://informationisbeautiful.net/visualizations/what-makes-a-good-data-visualization/).
:::




# Informationen

- Integrität der Datenquelle
- Integrität der Darstellung


# AChsen 

## Manipulation von Achsen
Beispiel aus der Einführung nehmen, aber Achse Cutten und oder nicht bei Null starten lassen. Dann eine weirde Message schreiben! 
Am besten etwas mit hohen nominalen Zahlen. Vielleicht etwas das sich über die Jahre verbessert hat?
Dann alternativen zeigen, z.B. Ranzoomen!


https://www.data-to-viz.com/caveat/cut_y_axis.html


## Konventionen

::: {.columns}
::: {.column width="50%"}
![](./images/florida.jpeg)
:::
::: {.colum width="50%"}
776.013 Home protection; use or threatened use of deadly force; presumption of fear of death or great bodily harm.—
(1) A person who is in a dwelling or residence in which the person has a right to be has no duty to retreat and has the right to stand his or her ground and use or threaten to use:  
(a) Nondeadly force against another when and to the extent that the person reasonably believes that such conduct is necessary to defend himself or herself or another against the other’s imminent use of unlawful force; or  
(b) Deadly force if he or she reasonably believes that using or threatening to use such force is necessary to prevent imminent death or great bodily harm to himself or herself or another or to prevent the imminent commission of a forcible felony.

http://www.leg.state.fl.us/statutes/index.cfm?App_mode=Display_Statute&URL=0700-0799/0776/Sections/0776.013.html
:::
:::



## Manipulation des Bildformats

::: panel-tabset
### Grafik


```{r}
#| label: example-weight
#| fig-width: 14
#| fig-height: 7
#| echo: false

set.seed(42)
my_weight <- data.frame(
  month = factor(c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"),
    levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"),
    ordered = TRUE
  ),
  weight = rnorm(12, 90, 5) / 1000,
  group = rep(1, 12)
)

ggplot(
  my_weight,
  aes(x = month, y = weight, group = group)
) +
  geom_point() +
  geom_line() +
  labs(
    title = "Mein Gewicht 2024",
    subtitle = "In metrischen Tonnen",
    x = "Monat",
    y = "Gewicht in t"
  ) +
  ylim(0, 1000) +
  theme_bg() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```


### Code


```{r}
#| label: example-weight
#| eval: false
```

:::


## Election Plot
https://storymaps.arcgis.com/stories/0e636a652d44484b9457f953994b212b
Vielleicht mit Bundestagswahl?

## Fehlender Kontext

::: {.columns}

:::{.column widht="50%}

```{r}
#| echo: false

gapminder_2020 <- gapminder_dat_full %>%
  filter(time == 2020) %>%
  arrange(desc(co2_cons))

ggplot(
  gapminder_2020[1:10, ],
  aes(x = reorder(country, co2_cons), y = co2_cons)
) +
  geom_bar(stat = "identity", width = 1, color = "black", fill = "#208C7A") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(
    title = "China burns the most CO2!",
    subtitle = "Total CO2 consumption in the biggest emmiting countries"
  ) +
  theme_bg()
```

:::


:::{.column widht="50%}
::: {.fragment}
```{r}
#| echo: false

gapminder_2020 <- gapminder_dat_full %>%
  filter(time == 2020) %>%
  arrange(desc(co2_pcap_cons))

ggplot(
  gapminder_2020[1:10, ],
  aes(x = reorder(country, co2_pcap_cons), y = co2_pcap_cons)
) +
  geom_bar(stat = "identity", width = 1, color = "black", fill = "#208C7A") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title = "CO2 consumption per capita in the biggest emmiting countries") +
  theme_bg()
```
:::
:::
:::

## Fehlender Kontext
Haushalt so groß wie nie

## Irreführender Kontext


# Story


# Goal

## Darstellung von Größen

:::{.columns}
:::{.column widht="50%}

```{r}
#| echo: false

library(ggplot2)

# Define the data
df <- data.frame(
  row = rep(1:3, each = 2),
  column = rep(c("A", "B"), times = 3),
  size = c(1, 10, 1, 5, 1, 2)
)

# Plot
ggplot(df, aes(x = column, y = factor(row), size = size)) +
  geom_point(shape = 16, color = "#01364C") +
  scale_size_area(max_size = 30) + # keeps area proportional to value
  scale_y_discrete(name = NULL, limits = rev) +
  xlab(NULL) +
  theme_bg() +
  theme(
    axis.text.y = element_text(hjust = 1),
    panel.grid = element_blank(),
    legend.position = "none"
  )
```
:::

:::{.column widht="50%}

::: {.fragment}

```{r}
#| echo: false
library(ggplot2)

# Define the data
df <- data.frame(
  row = rep(1:3, each = 2),
  column = rep(c("A", "B"), times = 3),
  size = c(1, 10, 1, 5, 1, 2)
)

# Plot with squares
ggplot(df, aes(x = column, y = factor(row), size = size)) +
  geom_point(shape = 15, color = "#01364C") + # shape 15 = square
  scale_size_area(max_size = 30) + # still based on area
  scale_y_discrete(name = NULL, limits = rev) +
  xlab(NULL) +
  theme_bg() +
  theme(
    axis.text.y = element_text(hjust = 1),
    panel.grid = element_blank(),
    legend.position = "none"
  )
```

:::
:::
:::

::: {.fragment}
:::{.callout-caution}
Die Größe von Kreisen einzuschätzen ist schwer!
:::
:::


## Das gleiche gilt für Winkel!
::: {.slide data-background-color="white"}


::: {.columns}
 
Versuche, die Größen zu sortieren: 

::: {.column width="50%"}
```{r }
#| echo: false

continent_co2 <- gapminder_dat %>%
  group_by(world_6region) %>%
  summarise(mean_co2_pcap_cons = mean(co2_pcap_cons, na.rm = TRUE))

continent_co2$world_6region <- factor(
  continent_co2$world_6region,
  levels = c(
    "south_asia",
    "sub_saharan_africa",
    "europe_central_asia",
    "middle_east_north_africa",
    "america",
    "east_asia_pacific"
  ),
  labels = c(
    "South Asia",
    "Sub-Saharan Africa",
    "Europe & Central Asia",
    "Middle East & North Africa",
    "Americas",
    "East Asia & Pacific"
  )
)

continent_co2_pct <- continent_co2 %>%
  mutate(percentage = mean_co2_pcap_cons / sum(mean_co2_pcap_cons)) %>%
  arrange(desc(world_6region)) %>%
  mutate(
    ymax = cumsum(percentage),
    ymin = c(0, head(ymax, -1))
  )


ggplot(
  continent_co2_pct,
  aes(x = "", y = percentage * 100, fill = world_6region)
) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  scale_fill_manual(values = theme_colors) +
  labs(title = "Share of global per capita CO2 consumption") +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 7),
    legend.title = element_blank()
  )
```
:::

::: {.column width="50%"}
:::{.fragment}

```{r}
#| echo: false


continent_co2_pct <- continent_co2 %>%
  mutate(percentage = mean_co2_pcap_cons / sum(mean_co2_pcap_cons) * 100)

ggplot(
  continent_co2_pct,
  aes(x = world_6region, y = percentage, fill = world_6region)
) +
  geom_bar(stat = "identity", width = 1) +
  scale_fill_manual(values = theme_colors) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 7),
    legend.title = element_blank()
  )
```
:::
:::
:::
:::



# Nützlichkeit

"Design is a requirement, not a cosmetic addition." [nature methods](https://www.nature.com/articles/nmeth.1783)


:::{.columns}

::: {.column width="50%"}
![](./images/remote.jpg)

::: image-ref
Foto von <a href="https://unsplash.com/de/@kellysikkema?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Kelly Sikkema</a> auf <a href="https://unsplash.com/de/fotos/drei-schwarze-fernbedienungen-auf-holztisch-HprPUHnjDgk?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

:::

:::{.column width="50%"}
![](./images/remote_2.jpg)

::: image-ref
Foto von <a href="https://unsplash.com/de/@ymoran?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Yucel Moran</a> auf <a href="https://unsplash.com/de/fotos/schwarze-fernbedienung-auf-weissem-textil-LJW-blAKI98?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

:::
:::



## Funktionelles Design {.nostretch}

Welche Funktion?

:::{.columns}

::: {.column width="67.5%"}
![](./images/map.png)

::: image-ref
Foto von <a href="https://www.bvg.de/.imaging/mte/bvg-theme/zoomed3000w/dam/BVG-Bilder/Verbindungen/netz-ab-01-a.jpg/jcr:content/netz-ab-01-a.jpg">BVG</a>
:::

:::

:::{.column width="32.5%"}
![](./images/fahrplan-tabelle.png)

::: image-ref
Foto von <a href="https://www.bvg.de/de/verbindungen/linienuebersicht">BVG</a>
:::

:::
:::

## 
Dabei kann es helfen, sich von bereits vorhandenen Plots inspirieren zu lassen.  
Handschriftliche Skizze ist auch erstmal hilfreich!



## Simplify to clarify

- Redundanzen Reduzieren
- Fokus auf das Wesentliche
https://www.data-to-viz.com/caveat/declutter.html


# Visual Form


## 
Beispiel von einem komplexen Plot bringen, den wir schon erzeugt haben, und dann reduzieren!

## Salienz von Informationen
https://www.nature.com/articles/nmeth1010-773

## Farben
:::: {.columns} 
::: {.column width="50%"}

:::

::: {.column width="50%"}
![](./images/colors.jpg){.image-right}
:::
:::

::: image-ref
Foto von <a href="https://unsplash.com/de/@efekurnaz?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Efe Kurnaz</a> auf <a href="https://unsplash.com/de/fotos/multicolored-hallway-RnCPiXixooY?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
      
:::

## Farbwahrnehmung beim Menschen

::: {.columns}
::: {.column width="50%"}
![](./images/electro_spec.svg)
:::

::: {.column widht="50%"}

Primärfarben des Lichts: **R**ot, **G**rün, **B**lau

:::
:::

:::{.image-ref}
By <a href="//commons.wikimedia.org/wiki/File:Electromagnetic-Spectrum.png" title="File:Electromagnetic-Spectrum.png">Original: </a> <a href="//commons.wikimedia.org/wiki/User:Penubag" title="User:Penubag">Penubag</a> Vector: <a href="//commons.wikimedia.org/wiki/User:Victor_Blacus" title="User:Victor Blacus">Victor Blacus</a> - Own work based on: <a href="//commons.wikimedia.org/wiki/File:Electromagnetic-Spectrum.png" title="File:Electromagnetic-Spectrum.png">Electromagnetic-Spectrum.png</a>, <a href="https://creativecommons.org/licenses/by-sa/3.0" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=22428451">Link</a>
:::

## Trichromatizität


Der Mensch hat in der Regel drei Zapfentypen, die unterschiedlich sensitiv für bestimmte Wellenlängen sind: 

![](./images/cones_human.svg)

- RGB erklären (und die Addition im Gehirn?


::: {.image-ref}
By <a href="//commons.wikimedia.org/wiki/User:BenRG" title="User:BenRG">BenRG</a> - <span class="int-own-work" lang="en">Own work</span>, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=7873848">Link</a>
:::

## 
Andere Tiere können auch mal mehr oder weniger haben:

![](./images/color_animals.png)

:::{.image-ref}
Bild aus [Farbsehen der Tiere](https://media.springernature.com/original/springer-static/image/art%3A10.1007%2Fs00347-017-0543-6/MediaObjects/347_2017_543_Fig1_HTML.gif?as=jpg)
:::

## 
Viele Tiere sehen nur grau:

- Wale
- Haie
- Waschbären
- Faultiere
- Armadillos
- Oktopusse
- Kraken

Warum also überhaupt Farbwahrnehmung?

- Ist subjektiv
- Aber kann konsistent wahrgenommen werden: Eine Erdebeere im Schatten und im Sonnenlicht kann jeweils rot wahrgenommen werden. Grautöne sind stärker vom Licht abhängig. 
- More is not always better: Affen vom Amerikanischen Kontinent sind teilweise die und teilweise tetra: di kann besser INsekten ausmachen, tri Früchte gegen grünen background. 
- Farbwahrnehmung also abhängig vom Drumrum
- Farben bringen nur einen Vorteil, wenn ein Individuum daraus meaning ableiten kann. 



## Farben
Ganglienzellen übertragen keine Informationen über absolute Helligkeit,
sondern über relative Helligkeit.
‣ Wie stark unterscheiden sich zwei Bereiche in ihrer Helligkeit?
‣ Wie stark hat sich eine Helligkeit gerade geändert?
Allgemeine Lehre daraus:
‣ Visualisierung kann nicht gut darin sein, absolute Werte zu
kommunizieren (Tabellen können das besser)
‣ Hingegen ist das visuelle System (und das Gehirn allgemein) extrem gut
darin, Unterschiede und Veränderungen zu erkennen
--> Beispiel bringen (Simultankontrast)

- Graustufen nicht für absolute oder kategorische Werte nutzen (mehr als vier können iwr nicht gut unterscheiden)

## Farbton, Sättigung, Helligkeit

![](./images/color_properties.png)

## Kleine Farblehre

"All colors are the friends of their neighbors and the lovers of their opposites." - Marc Chagall 


![](./images/farbkreis.png)

::: image-ref
Nach <a href="https://de.wikipedia.org/wiki/User:MalteAhrens" class="extiw" title="de:User:MalteAhrens">MalteAhrens</a> at <a class="external text" href="https://de.wikipedia.org">de.wikipedia</a>. Vectorization by <a href="//commons.wikimedia.org/wiki/User:SidShakal" title="User:SidShakal">User:SidShakal</a> - Raster version from Wikimedia Commons., Gemeinfrei, <a href="https://commons.wikimedia.org/w/index.php?curid=3574696">Link</a>
:::

## Kleine Farbenlehre

:::{.columns}
:::{.column width="50%"}

![](./images/zoeaaf.jpg)

::: image-ref
<a href="https://commons.wikimedia.org/wiki/File:De_zoeaaf_-_s0067V1962_-_Van_Gogh_Museum.jpg">Vincent van Gogh</a>, Public domain, via Wikimedia Commons
:::
:::

:::{.column width="50%"}
- Gegenüberliegende Farben intensivieren sich gegenseitig: eine Primärfarbe, und eine Sekundärfarbe, die aus den anderen beiden Primärfarben gemischt wird. Das erzeugt stärkere Kontraste. (Van Gogh bild)
- Mit weiß und schwarz lassen sich die Schattierungen hinzumischen
- triadisches Farbschema: Fom MIttelpunkt des Farbkreises Strahlen mit gleichem Winkel abgehen lassen (So viele, wie man Farben haben will). Das wählt dann Farben mit dem größten Kontrast aus. 
(https://www.kunstplaza.de/fashion-design/farbenlehre-farbtheorie-styleguides-fashion-design/)

:::
:::









## Farbräume
- RGB: **Zusammen**mischen von Licht der unterschiedlichen Farben. Alle drei zusammen ergeben weiß. 
- CMYK: **Ausblenden** aus dem weißen Farbspektrum durch Filter. Grundfarben: Gelb, Magenta (Purpur), Cyan (Blaugrün) (+K - Key (also Schwarz))




# Was bringt uns das jetzt für unsere Abbildungen?

# 1. Die Farben sollten unterscheidbar, aber ähnlich sein!

## 1. Unterscheidbar, aber ähnlich

```{r}
#| echo: false

color_plot_bar <- ggplot(
  continent_co2_pct,
  aes(x = world_6region, y = percentage, fill = world_6region)
) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 7),
    legend.title = element_blank()
  ) 
```


::: {.columns}
:::{.column widht="50%}

```{r}
#| label: color_bias__scatter_bar
#| echo: false

theme_colors_2 <- c(
  "#9FAFC0", # entsättigtes Dunkelblau
  "#B49B97", # ausgebleichtes Braun
  "#F2E2A0", # ausgebleichtes Gelb (statt Rot)
  "#D80027", # sehr leuchtendes Rot (statt Gelb)
  "#A7C9C3", # stark aufgehelltes Türkis
  "#D8B88C", # heller Orange-Braun-Ton
  "#A6B7CA", # blasser Stahlblau-Ton
  "#BFD4C2", # sehr blasses Olivgrün
  "#D6C1D5", # blasses Flieder/Pastell-Lila
  "#D8D9DB" # sehr heller, neutraler Grauton
)


color_plot_bar +
  scale_fill_manual(values = theme_colors_2)
```

:::


:::{.column widht="50%}
```{r}
#| label: color_balanced__scatter_bar
#| echo: false


theme_colors_balanced <- c(
  "#4D9285",  # gedämpftes Türkisgrün – weniger satt als Original (#208C7A)
  "#D89035",  # warmes Ocker-Orange – harmonischer als das grelle Gelb (#F4BA02)
  "#B95454",  # weiches Rot – weniger dominant als #9B1B34
  "#4E6D84",  # gemäßigtes Dunkelblau – weniger kalt als #01364C
  "#7A5A53",  # milderes Braun – balanciert zu den anderen warmen Tönen
  "#BC8B4C",  # orange-braun, passt zu Gelb & Braun (#C97E10 → abgemildert)
  "#67829E",  # etwas entsättigtes Stahlblau (#476A92)
  "#86A18C",  # grünlich-grau – Kombination aus Olive und Türkis
  "#A68CA5",  # gedecktes Violett – deutlich ruhiger als Original (#B47EB3)
  "#B7B9BC"   # kühles Hellgrau – dient als neutraler Ausgleich
)

color_plot_bar +
  scale_fill_manual(values = theme_colors_balanced)
```


:::

:::


## 1. Unterscheidbar, aber ähnlich

```{r}
#| label: color-plot
#| echo: false

gapminder_1020 <- gapminder_dat %>% 
filter(time %in% 2010:2020)


## Auch gut, weil man das dann verbinden kann um zu zeigen, dass Farben nur Bedingt helfen, Muster zu erkennen. 
top5_co2 <- gapminder_1020 %>%
  group_by(name) %>%
  summarise(mean_co2 = mean(co2_pcap_cons, na.rm = TRUE)) %>%
  arrange(desc(mean_co2)) %>%
  slice_head(n = 5)

## Vielleicht besser die 6 worldregions nehmen!
## Dann zum Vergleich später zeigen, Wenn es länder wären. 



color_plot <- ggplot(
  gapminder_2020,
  aes(x = pop, y = co2_pcap_cons, color = world_6region)
) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  xlim(0, 1.5*10^9)

```

::: {.columns}
:::{.column widht="50%}
```{r}
#| label: color_bias_bar
#| echo: false
#| fig-width: 7
#| fig-height: 7

theme_colors_2 <- c(
  "#9FAFC0", # entsättigtes Dunkelblau
  "#B49B97", # ausgebleichtes Braun
  "#F2E2A0", # ausgebleichtes Gelb (statt Rot)
  "#D80027", # sehr leuchtendes Rot (statt Gelb)
  "#A7C9C3", # stark aufgehelltes Türkis
  "#D8B88C", # heller Orange-Braun-Ton
  "#A6B7CA", # blasser Stahlblau-Ton
  "#BFD4C2", # sehr blasses Olivgrün
  "#D6C1D5", # blasses Flieder/Pastell-Lila
  "#D8D9DB" # sehr heller, neutraler Grauton
)

color_plot +
  scale_color_manual(values = theme_colors_2) +
theme_bg()
```
:::

:::{.column widht="50%}
```{r}
#| label: color_balanced_bar
#| echo: false
#| fig-width: 7
#| fig-height: 7

theme_colors_balanced <- c(
  "#4D9285",  # gedämpftes Türkisgrün – weniger satt als Original (#208C7A)
  "#D89035",  # warmes Ocker-Orange – harmonischer als das grelle Gelb (#F4BA02)
  "#B95454",  # weiches Rot – weniger dominant als #9B1B34
  "#4E6D84",  # gemäßigtes Dunkelblau – weniger kalt als #01364C
  "#7A5A53",  # milderes Braun – balanciert zu den anderen warmen Tönen
  "#BC8B4C",  # orange-braun, passt zu Gelb & Braun (#C97E10 → abgemildert)
  "#67829E",  # etwas entsättigtes Stahlblau (#476A92)
  "#86A18C",  # grünlich-grau – Kombination aus Olive und Türkis
  "#A68CA5",  # gedecktes Violett – deutlich ruhiger als Original (#B47EB3)
  "#B7B9BC"   # kühles Hellgrau – dient als neutraler Ausgleich
)


color_plot +
  scale_color_manual(values = theme_colors_balanced) +
theme_bg()

# 
#   scale_color_brewer(palette = "Dark2") +
#   theme_minimal() +
#   labs(title = "Share of global per capita CO2 consumption")

```

:::
:::



## Farbton, Sättigung und Helligkeit

:::{.columns}
:::{.column width="50%"}
```{r}
#| label: color_hue_only
#| echo: false


theme_colors_hue_only <- c(
  "#D88585",  # muted red
  "#D89D85",  # warm orange
  "#CDD885",  # soft olive
  "#A9D885",  # light green
  "#85D89D",  # aquamarine
  "#85D8D8",  # turquoise
  "#85A9D8",  # muted blue
  "#9D85D8",  # lavender
  "#D885CD",  # dusty pink-purple
  "#D8859D"   # rosy mauve
)



color_plot +
  scale_color_manual(values = theme_colors_hue_only)


```


:::
:::{.column widht="50%}

```{r}
#| echo: false


theme_colors_hue_varied <- c(
  "#C15A5A",  # red – more saturated & slightly darker
  "#DA935A",  # orange – a bit lighter
  "#D4DA5A",  # olive – higher lightness, less saturation
  "#92DA5A",  # light green – more saturated
  "#5ADAA0",  # aquamarine – brighter & lighter
  "#5ADADA",  # turquoise – more saturated & icy
  "#5A92DA",  # blue – stronger contrast
  "#7A5ADA",  # lavender – richer, darker
  "#DA5AC5",  # pink-purple – vivid, high saturation
  "#DA5A8F"   # mauve – mid-lightness, saturated
)

color_plot +
  scale_color_manual(values = theme_colors_hue_varied)



```


:::

:::


::: {.callout-tip}
Variiert immer Farbton, Sättigung und Helligkeit gleichzeitig. 
:::

## Grau

::: {.columns}
::: {.column width="50%}

```{r}
#| echo: false

theme_colors_gray <- gray_hex(theme_colors_hue_only)

color_plot_bar +
  scale_fill_manual(values = theme_colors_gray)

```

:::
::: {.column width="50%}

```{r}
#| echo: false

theme_colors_gray_varied <- gray_hex(theme_colors_hue_varied)

color_plot_bar +
  scale_fill_manual(values = theme_colors_gray_varied)

```
:::
:::


## 2. Intuitives Verständnis: Diskrete Farben vs. Farbverläufe
- Vor allem für diskrete Gruppen geeignet
- Farbverläufe schwieriger (aber es gibt color scales dafür)
- Bestimmte Farben (Grün = gut, Rot = Gefahr)

## Größe

:::{.columns}
:::{.column width="33%"}

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 8


ggplot(
  gapminder_2020,
  aes(x = pop, y = co2_pcap_cons, color = world_6region)
) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  xlim(0, 1.5*10^9) +
theme_bg() +
scale_color_manual(values = theme_colors_balanced) +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 9),
    legend.title = element_blank()
  )
```
:::

:::{.column width="33%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 8

ggplot(
  gapminder_2020,
  aes(x = pop, y = co2_pcap_cons, color = world_6region)
) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  xlim(0, 1.5*10^9) +
theme_bg() +
scale_color_manual(values = theme_colors_balanced) +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 9),
    legend.title = element_blank()
  )
```
:::

:::{.column width="33%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 8

ggplot(
  gapminder_2020,
  aes(x = pop, y = co2_pcap_cons, color = world_6region)
) +
  geom_point(size = 0.5) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  xlim(0, 1.5*10^9) + 
theme_bg() +
scale_color_manual(values = theme_colors_balanced) +
    theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    legend.text = element_text(size = 9),
    legend.title = element_blank()
  )
```
:::
:::


## Farbe ist relativ
Beispiel: 
Grautöne vs Rottöne


![](./images/color_perception.png)

::: .image-ref
Bild von [Nature Methods](https://www.nature.com/articles/nmeth0810-573/figures/1). 
:::


## Farbe ist relativ
```{r}
#| label: color_bias_reds
#| echo: false
#| fig-width: 14
#| fig-height: 7
#| 
theme_colors_red <- c(
  "#E28A8A",  # weiches Rosa-Rot
  "#CF5C5C",  # mildes Mittelrot
  "#D80027",  # dein kräftiges Signalrot (Zentrum)
  "#B00022",  # etwas dunkler, tiefes Rubinrot
  "#8C001B",  # noch dunkleres Weinrot
  "#730016"  # fast Bordeaux
)


color_plot +
  scale_color_manual(values = theme_colors_red)

# 
#   scale_color_brewer(palette = "Dark2") +
#   theme_minimal() +
#   labs(title = "Share of global per capita CO2 consumption")

```


## Fragen: Warum ist das noch eine schelchte Color scale? 
![](./images/colorblind_check.png)

::: .image-ref
Siehe [Colblindor](https://www.color-blindness.com/coblis-color-blindness-simulator/). 
:::


## Farbfehlsichtigkeit

![](./images/cones_eye.jpg)

protanopic right side

::: {.image-ref}
By Mark Fairchild, <a href="https://creativecommons.org/licenses/by-sa/3.0" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=32075732">Link</a>
:::

- Protanopie: Zapfentyp L (rot) fehlt: rot vs grün Schwäche
- Deuteranopie: Zapfentyp M (grün) fehlt: rot vs grün Schwäche
- Tritanopie: Zapfentyp S (blau) fehlt: blau vs grün, gelb vs violett Schwäche


- Take the above scale and show that it is not great for color blindness
- https://www.color-blindness.com/coblis-color-blindness-simulator/


##

```{r}
library(colorblindcheck)
palette_check(theme_colors_red, plot = TRUE)  
```

## Das kann man sich natürlich auch zu Nutze machen (Passt aber vielleicht eher zu space? -> da nochmal zeigen, hier die Punkte enger zusammen )

```{r}
#| echo: false
#| eval: false

library(rvest)
library(httr)
library(polite)

url <- "https://en.wikipedia.org/wiki/Gun_ownership"
url_bow <- polite::bow(url)
url_bow

firearm_df <- polite::scrape(url_bow) %>%
  rvest::html_nodes("table.wikitable") %>%
  rvest::html_table(fill = TRUE) %>%
  as.data.frame() %>%
  rename(country = "Countries.and.territories", "guns" = "Estimate.of.civilian.firearms.per.100.people") %>%
  select(country, guns)

saveRDS(firearm_df, here::here("sessions", "good_plots", "data", "firearm_df.rds"))
```

```{r}
#| echo: false

firearm_df <- readRDS(here::here("sessions", "good_plots", "data", "firearm_df.rds"))
df <- data.frame(
  country = c("United States", "Germany", "France", "Canada", "Finland", "Austria", "Australia", "Italy", "Netherlands", "Switzerland"),
  mass_shootings = c(109, 5, 6, 4, 3, 2, 1, 2, 2, 2)
) %>%
  left_join(firearm_df) %>%
  mutate(labels = case_when(
    country == "United States" ~ "USA",
    country == "Germany" ~ "Germany",
    country == "Switzerland" ~ "Switzerland",
    country == "Netherlands" ~ "Netherlands",
    TRUE ~ NA
  ))
```


```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 12

ggplot(
  data = df,
  aes(x = guns, y = mass_shootings, label = labels)
) +
  geom_point(aes(colour = ifelse(country == "United States", "USA", "noUSA")), size = 5) +
  scale_colour_manual(values = c("lightgrey", "red")) +
  geom_text(vjust = 2, size = 5, color = "#01364C") +
  theme_bg() +
  theme(legend.position = "none") +
  xlab("Guns per 100 Civilians") +
  ylab("Number of Mass Shootings 2002 - 2022")
```


::: aside
Data from [Rockefeller Institute](https://rockinst.org/blog/public-mass-shootings-around-the-world-prevalence-context-and-prevention/) and [Wikipedia](https://en.wikipedia.org/wiki/Gun_ownership). 
:::

## Nicht zu viele!


## Color for coding a third dimension
- Wie viel macht sinn?
- Scatterplot
- Sättigung um dimensionalität der Farben darzustellen



## Farbfehlsichtigkeiten

Farbsehtests


- Farbwahrnehmung braucht Helligkeit und Fläche


# Anwendung in ggplot2


## Farben whlen
- Name
- rgb()
- Nummer
- Hex code

## scale_color vs scale_fill

## Farbskalen wählen

## Manuell

::: {.columns}
::: {.column width="50%"}

::: panel-tabset

### Code

```{r}
#| label: manual_color_scale
#| code-line-numbers: "5,9"
#| fig-show: hide

ggplot(
  continent_co2_pct,
  aes(x = world_6region, 
      y = percentage, 
      fill = world_6region)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  scale_fill_manual(values = c("red", "green", "blue", "yellow", "violet", "brown"))
```

### Plot

```{r}
#| label: manual_color_scale
#| echo: false
```

:::
:::

:::{.column widht="50%"}


::: panel-tabset

### Code

```{r}
#| label: manual_color_scale_named
#| code-line-numbers: "5,9"
#| reults: hide
#| fig-show: hide

my_color_scale <- c("East Asia & Pacific" ="red", 
                    "South Asia" = "green", 
                    "Sub-Saharan Africa" = "blue", 
                    "Europe & Central Asia" = "yellow", 
                    "Middle East & North Africa" = "violet", 
                    "Americas" = "brown")
ggplot(
  continent_co2_pct,
  aes(x = world_6region, 
      y = percentage, 
      color = world_6region)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  scale_color_manual(values = my_color_scale)
```

### Plot

```{r}
#| label: manual_color_scale_named
#| echo: false
```

:::


:::
:::

<!-- ::: {.callout-tip} -->
<!-- Wenn du in einem Projekt die gleichen Gruppen in verschiedenen Plots zeigst, setze die Varbskala einmal mit den Gruppennamen, damit die Gruppen in allen Plots die selben Farben bekommen.  -->
<!-- ::: -->


## Graustufen 

```{r}
#| reults: hide
#| fig-show: hide
#| code-line-numbers: "9"


ggplot(
  continent_co2_pct,
  aes(x = world_6region, 
      y = percentage, 
      fill = world_6region)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  scale_fill_grey()
```




## Externe Farb-Paletten

::: {.columns}
::: {.column width="50%"}
[**R Color Brewer**](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html)

```{r}
library(RColorBrewer)
display.brewer.all(colorblindFriendly=FALSE)
```

:::
::: {.column width="50%"}


::: panel-tabset

### Code

```{r}
#| label: color_brewer
#| reults: hide
#| fig-show: hide
#| code-line-numbers: "1,11"

library(RColorBrewer)

ggplot(
  continent_co2_pct,
  aes(x = world_6region, 
      y = percentage, 
      fill = world_6region)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  scale_fill_brewer(palette = "PuOr")
```


### Plot

```{r}
#| label: color_brewer
#| echo: false
```

:::
:::
:::

## Externe Farb-Paletten
::: {.columns}
::: {.column width="50%"}
[**paletteer**](https://r-graph-gallery.com/package/paletteer.html)

Sammlung von Paletten aus diversen Paketen

- [Palette-Finder](https://r-graph-gallery.com/color-palette-finder)
- [Gallerie](https://pmassicotte.github.io/paletteer_gallery/#sequential)

:::

::: {.column width="50%"}

::: panel-tabset

### Code

```{r}
#| label: paletteer
#| reults: hide
#| fig-show: hide
#| code-line-numbers: "1,11"

library(paletteer)

ggplot(
  continent_co2_pct,
  aes(x = world_6region, 
      y = percentage, 
      fill = world_6region)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  labs(title = "Share of global per capita CO2 consumption") +
  scale_fill_paletteer_d("LaCroixColoR::Orange")
```


### Plot

```{r}
#| label: paletteer
#| echo: false
```

:::
:::

:::


## Arten von Skalen
- Intervallskaliert/Verhältnisskaliert: Es gibt Nullpunkt: Divergierende Skalen
  - Kein Nullpunkt: Gleichmäßige Abstände zwischen Farbwerten
- Ordinal: Richtung und gute Unterscheidbarkeit im Farbraum
- Nominalskaliert: Spriale/Diagnoale im Farbraum


- Diskret
- Continuous
- Binned
Vorgefertigte Paletten:

Sequenziell
\
Qualitativ
\
Diverging


## Weiter Tools

![](./images/hue_box.jpg)


- Colorbrewer
- Huemint

## Farben: Zusammenfassung


## Übung

1. Teste, ob deine bisherige Abbildung für Menschen mit Farbfehlsichtigkeit lesbar ist. 
2. Baue eine eigene Color-Palette und wende sie auf deinen Plot an. Achte dabei auf Unterscheidbarkeit (Auch color blind), aber auch auf Design. 

## Gruppieren


## Verteilungen Plotten

## Eine Grafik ist kann nur einen Teil der Zusammenhänge darstellen

Im  Schlechtesten Fall für Manipulation nutzbar



## Black swann

## Was mögt ihr an dieser Grafik/nicht?


## Plot-Typen

## Choosing the correct plot
https://www.data-to-viz.com/

## Pulikum

## Geschichte
- Gleiche sache auf verschiedene Arten darstellen -> was wirkt am meisten?  


## Purpose
- Exploratory vs. Explanatory
- Kann oft über reines Zeigen der Daten hinausgehen. 



## Size
Also include population size in the scatterplot

## Tufte
- So wenig Tinte wie möglich nutzen
- Alles nicht essentielle entfernen
- Redundanzen entferenen  

Beispiel zeigen: Eins ist aufgeblasen, man braucht Zeit zur Orientierung. Ein anderes theme_tufte

## Data-ink ratio
Beispiel zum Minimieren zeigen
- Raincloud plots

## Caveats
https://www.data-to-viz.com/caveats.html

Immer einen Plot zeigen, dann zusammen überlgen was daran schlecht ist, was verbessert werden kann. 


## Takeaways
- Kommunizieren von der größtmöglichen Anzahl von Ideen in kürzester Zeit.
- Maximieren von Data-ink ratio
- Minimieren von Chart-junk
- Erhöhe Datendichte, Vervielfältige kleine Versionen der Abbildung für verschiedene Gruppen

## Caveat Plots: See data to viz

## Storytelling
Rolfs 7

## Using Text/Annotations

## Nutzen von Eigenschaften der Wahrnehmung
- Bewusste Wahrnehmung ignoriert Informationen und fügt hinzu
- Nähe
- Salienz (Farbe, Größe, Neigung) (Szaﬁr, Haroz, Gleicher & Franconeri
(2016))
- Hier würde das USA Bild passen (evtl. mit einem anderen Beispiel, das den Unterschied deutlich macht, z.B. keine andere Farbe, näher dran durch andere Achse)
- Harold et al., 2016: Lenken von Aufmerksamkeit
- Nothelfer et al., 2017: Redundatne Kodierung führt zu deutlich höherer Genauigkeit der Antworten und kürzeren Reaktionszeiten

## Übung
Schlechte Grafiken verbessern: https://www.data-to-viz.com/caveats.html
