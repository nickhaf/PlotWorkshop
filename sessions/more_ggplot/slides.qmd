---
title: "Mehr ggplot2!"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---

```{r}
#| label: Load pacakges
#| echo: false

library(here)
library(janitor)
library(ggwordcloud)
library(tidyverse)
source(here::here("src", "themes.R"))
source(here::here("src", "functions.R"))
```

## 
```{r}
#| label: Load gapminder data

library(tidyverse)

gapminder_dat_full <- readRDS(here::here("data", "gapminder_dat.rds"))

gapminder_dat_trend <- gapminder_dat_full %>%
  filter(time > 1990, time < 2022, country %in% c("nga", "zaf", "deu", "rus", "chn", "ind", "bra", "usa", "egy", "aus", "mex", "jpn"))
```

## Facetting
```{r}
#| output-location: column

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1.4) +
  theme_bg()
```


Lösung: [Faceting](https://ggplot2-book.org/facet.html#sec-facet-wrap)

## Faceting
Anordnen von einer *einzelnen* Variable in einem Raster:

:::{.columns}
:::{.column width="50%"}

#### `facet_wrap()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1.4) +
  facet_wrap(vars(country), nrow = 4) +
  theme_bg()
```

:::
::: {.column width="50%"}

#### facet_grid

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1.4) +
  facet_grid(country ~ .) +
  theme_bg()
```

:::
:::

## Facetting - Mehrere Variablen
Anordnen von *mehreren* Variable in einem Raster:

::: {.columns}

::: {.column width="50%"}
#### `facet_wrap()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_point() +
  geom_line() +
  facet_wrap(vars(country, world_4region), nrow = 4) +
  theme_bg()
```

:::
::: {.column width="50%"}
#### `facet_grid()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1.4) +
  facet_grid(country ~ world_4region) +
  theme_bg()
```

:::
:::

## Facetting - Tipps
Plot alle Punkte

```{r}
#| output-location: column

bg <- gapminder_dat_trend %>%
  mutate(country_bg = country) %>%
  select(-country)

ggplot(gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country, group = country)) +
  # background lines: drawn in every facet, grouped by country_bg
  geom_line(
    data = bg,
    aes(x = time, y = co2_pcap_cons, group = country_bg),
    inherit.aes = FALSE,
    color = "grey70",
    alpha = 0.5,
    linewidth = 0.4
  ) +
  # foreground points/lines for the focal country in each facet
  geom_line(linewidth = 1.5) +
  facet_wrap(vars(country)) +
  guides(color = "none") +
  theme_bg()
```


## Facetting - Tipps
Plot Mittelwerte

```{r}
#| output-location: column

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1) +
  geom_smooth(aes(group = income_groups), color = "grey") +
  facet_wrap(vars(income_groups)) +
  theme_bg()
```

## Sortieren
Sortieren, läuft in ggplot2 generell über `factor()`:


```{r}
gapminder_dat_trend$income_groups_fac <- factor(gapminder_dat_trend$income_groups,
  levels = c("lower_middle_income", "upper_middle_income", "high_income")
)
```


```{r}
#| output-location: column

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1) +
  geom_smooth(aes(group = income_groups), color = "grey") +
  facet_wrap(vars(income_groups_fac)) +
  theme_bg()
```




## Scales
"Scales in ggplot2 control the [mapping from data to aesthetics]{.highlight}. They take your data and turn it into something that you can see, like size, colour, position or shape." [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/scales.html)

Link to aes slide. 



## Legenden

Legenden werden [automatisch]{.highlight} erzeugt. Dafür werden die [aestetics]{.highlight} genutzt, also das mapping von Daten zu grafischen Elementen. 


::: {.callout-info}
Legenden und Achsen sind funktional äquivalent und werden in ggplot2 unter dem Begriff [guides]{.highlight} zusammengefasst. Während Scales die Daten auf grafische Eigenschaften wie Position oder Farbe abbilden, machen Guides diese Abbildung wieder verständlich: Achsen übersetzen Positionen zurück in Zahlen, Legenden ordnen Farben oder Symbole den entsprechenden Datenwerten zu. Man kann sie daher als die [„Umkehrfunktion“]{.highlight} der jeweiligen Scales verstehen.
:::

## 
![](./images/scales_legends.png)


## 

Jede aesthetic im Plot ist mit genau einer scale verbunden: 


:::{.columns}

:::{.column width="50%"}
### Implizite Definition

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line()
```
:::
:::{.column width="50%"}
### Wird intern zu: 

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous() + 
  scale_y_continuous() + 
  scale_colour_discrete()
```
:::
:::

- `time` und `co2_pcacp_cons` sind beide kontinuierliche Variablen: `scale_x_continuous()`, `scale_x_continuous()`
- `country` ist diskret: `scale_colour_discrete()`

Das können wir uns zunutze machen, um manuell Scales zu definieren. 


## 
```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_continuous(name = "CO2 Verbrauch pro Kopf") + 
  scale_colour_discrete(name = "Länder")
```

:::{.callout-warning}
In der Praxis würden wir dafür `labs(x = "Jahr", y = "CO2 Verbrauch pro Kopf", color = "Länder")` nutzen. Wir sehen so aber, dass Achsen- und Legendentitel jeweils Skalennamen sind.  
:::

##

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_log(name = "CO2 Verbrauch pro Kopf") + 
  scale_colour_brewer()
  
  scale_colour_discrete(name = "Länder")
```

## Koordinatensytem

- Polar, evtl. characters plot oder weltraumplot als beispiel

## Abspeichern
Vektor vs Raster (Rolfs 7)
