---
title: "Mehr ggplot2!"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---

```{r}
#| label: Load pacakges
#| echo: false

library(here)
library(tidyverse)
source(here::here("src", "themes.R"))
source(here::here("src", "functions.R"))
```

## Datensatz {backround-image="./images/central_perk.jpg"}


```{r}
# ## Keep in mind!
# ## Eventuell für die Übung? 
# tuesdata <- tidytuesdayR::tt_load('2025-08-26')
# tuesdata$billboard %>% 
#   filter(song == "Love the Way You Lie") %>% 
#   select(danceability, energy, happiness)
# 
# 
# ## Netflix
# tuesdata <- tidytuesdayR::tt_load('2025-07-29')
# 
# ## Gutenberg project
# tuesdata <- tidytuesdayR::tt_load('2025-06-03')


characters <- tidytuesdayR::tt_load('2022-08-16')

```

## 
```{r}
char_dat <- characters$characters
psych_dat <- characters$psych_stats



dat_merged <- char_dat %>% 
  rename(char_name = name) %>% 
  left_join(psych_dat) 


dat_prepped <-  dat_merged %>% 
  filter(uni_name %in% c("How I Met Your Mother", "Friends")) %>% 
  filter(question %in% c("doer/thinker", "jock/nerd", "cold/warm", "main character/side character", "crazy/sane"))

## Cold warm: Geschlecht? Could get ChatGPT to code

## Eventuell inside standardisieren, um spezifische Abweichung zu zeigen? 
```






::: image-ref
Foto von <a href="https://unsplash.com/de/@lgtts?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Ilse Orsel</a> auf <a href="https://unsplash.com/de/fotos/rot-weisses-unks-cafe-fwPHQB4kGzA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::


## Charaktereigenschaften in HIMYM

```{r}
#| output-location: column

ggplot(data = dat_prepped, 
        mapping = aes(x = question, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point()
```

Wir vergleichen jetzt einige Charaktereigenschaften in HIMYM und Friends. 
Gerade noch etwas schwierig. 
Lösung: [Faceting](https://ggplot2-book.org/facet.html#sec-facet-wrap)

# Facetting

## Faceting
Anordnen von einer *einzelnen* Variable in einem Raster:

:::{.columns}
:::{.column width="50%"}

#### `facet_wrap()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(data = dat_prepped, 
        mapping = aes(x = question, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point() +
  facet_wrap(vars(char_name), nrow = 4) +
  theme_bg()
```

:::
::: {.column width="50%"}

#### facet_grid

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(data = dat_prepped, 
        mapping = aes(x = question, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point() +
  facet_grid(char_name ~ .) +
  theme_bg()
```

:::
:::

## Facetting - Mehrere Variablen
Anordnen von *mehreren* Variable in einem Raster:

::: {.columns}

::: {.column width="50%"}
#### `facet_wrap()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(data = dat_prepped, 
        mapping = aes(x = question, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point() +
  facet_wrap(vars(char_name, uni_name), nrow = 4) +
  theme_bg()
```

:::
::: {.column width="50%"}
#### `facet_grid()`

```{r}
#| code-line-numbers: "7"
#| fig-height: 4

ggplot(data = dat_prepped, 
        mapping = aes(x = question, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point() +
  facet_grid(char_name ~ uni_name) +
  theme_bg()
```

:::
:::

## Facetting - Tipps
Plot alle Punkte

```{r}
#| output-location: column

bg <- gapminder_dat_trend %>%
  mutate(country_bg = country) %>%
  select(-country)

ggplot(gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country, group = country)) +
  # background lines: drawn in every facet, grouped by country_bg
  geom_line(
    data = bg,
    aes(x = time, y = co2_pcap_cons, group = country_bg),
    inherit.aes = FALSE,
    color = "grey70",
    alpha = 0.5,
    linewidth = 0.4
  ) +
  # foreground points/lines for the focal country in each facet
  geom_line(linewidth = 1.5) +
  facet_wrap(vars(country)) +
  guides(color = "none") +
  theme_bg()
```


## Facetting - Tipps
Plot Mittelwerte

```{r}
#| output-location: column

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1) +
  geom_smooth(aes(group = income_groups), color = "grey") +
  facet_wrap(vars(income_groups)) +
  theme_bg()
```

## Sortieren
Sortieren, läuft in ggplot2 generell über `factor()`:


```{r}
gapminder_dat_trend$income_groups_fac <- factor(gapminder_dat_trend$income_groups,
  levels = c("lower_middle_income", "upper_middle_income", "high_income")
)
```


```{r}
#| output-location: column

ggplot(
  data = gapminder_dat_trend,
  mapping = aes(
    x = time,
    y = co2_pcap_cons,
    color = country
  )
) +
  geom_line(linewidth = 1) +
  geom_smooth(aes(group = income_groups), color = "grey") +
  facet_wrap(vars(income_groups_fac)) +
  theme_bg()
```



# Skalen und Legenden

## Skalen
"Scales in ggplot2 control the [mapping from data to aesthetics]{.highlight}. They take your data and turn it into something that you can see, like size, colour, position or shape." [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/scales.html)

Link to aes slide. 



## Legenden

Legenden werden [automatisch]{.highlight} erzeugt. Dafür werden die [aestetics]{.highlight} genutzt, also das mapping von Daten zu grafischen Elementen. 
[Jede]{.highlight} Skala bekommt eine Legende zugeordnet. 

![](./images/scales_legends.png)

::: {.callout-info}
Legenden und Achsen sind funktional äquivalent und werden in ggplot2 unter dem Begriff [guides]{.highlight} zusammengefasst. Während Skalen die Daten auf grafische Eigenschaften wie Position oder Farbe abbilden, machen Guides diese Abbildung wieder verständlich: Achsen übersetzen Positionen zurück in Zahlen, Legenden ordnen Farben oder Symbole den entsprechenden Datenwerten zu. Man kann sie daher als die [„Umkehrfunktion“]{.highlight} der jeweiligen Scales verstehen.
:::


## 

Jede aesthetic im Plot ist mit genau einer scale verbunden: 


:::{.columns}

:::{.column width="50%"}
### Implizite Definition

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line()
```
:::
:::{.column width="50%"}
### Wird intern zu: 

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous() + 
  scale_y_continuous() + 
  scale_colour_discrete()
```
:::
:::

- `time` und `co2_pcacp_cons` sind beide kontinuierliche Variablen: `scale_x_continuous()`, `scale_x_continuous()`
- `country` ist diskret: `scale_colour_discrete()`

Das können wir uns zunutze machen, um manuell Scales zu definieren. 


## 
```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_continuous(name = "CO2 Verbrauch pro Kopf") + 
  scale_colour_discrete(name = "Länder")
```

:::{.callout-warning}
In der Praxis würden wir dafür `labs(x = "Jahr", y = "CO2 Verbrauch pro Kopf", color = "Länder")` nutzen. Wir sehen so aber, dass Achsen- und Legendentitel jeweils Skalennamen sind.  
:::

##

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_log10(name = "CO2 Verbrauch pro Kopf") +
  scale_colour_discrete(name = "Länder")
```


::: {.callout-tip}
Eine Übersicht über die möglichen Skalentypen findet sich [hier])https://ggplot2tor.com/scales/). 

:::


## Einige Anwendungsfälle


:::{.columns}

### Farben


```{r}
ggplot(
  data = gapminder_dat_trend, 
  aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_colour_manual(values = c("deu" = "black", "usa" = "blue", "chn" = "red", "ind" = "orange", "bra" = "green", "zaf" = "purple", "rus" = "brown", "egy" = "yellow", "aus" = "pink", "mex" = "cyan", "jpn" = "grey"), name = "Länder")
```

:::

:::{.column width="50%}

### Skalen-Ticks

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_log10(name = "CO2 Verbrauch pro Kopf") +
  scale_colour_discrete(name = "Länder")
```


:::
:::


## Scale Guides

Jede Skala (und damit jede Aesthetic) bekommt einen Guide zugeordnet. 
Intern passiert das über `guides()`. Wir können `guides()` also nutzen, um die Legende zu manipulieren:


```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_log10(name = "CO2 Verbrauch pro Kopf") +
  scale_colour_discrete(name = "Länder") +
  guides(color = guide_legend(title = "Staaten", ncol = 3, reverse = TRUE, override.aes = list(linewidth = 3)))

```

#### Mögliche guide-Funktionen

::: {.columns}

:::{.column width="50%"}
- `guide_colourbar()`
- `guide_coloursteps()`
- `guide_axis()`
::: 
:::{.column width="50%"}
- `guide_legend()`
- `guide_bins()`
:::
:::


##


::: {.column}
::: {.column width = "50%}

```{r}
ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr") + 
  scale_y_log10(name = "CO2 Verbrauch pro Kopf") +
  scale_colour_discrete(name = "Länder") +
  guides(x = guide_axis(angle = 90))

```


:::
::: {.column width="50%"}

```{r}
#| code-line-numbers: "4"

ggplot(
  data = gapminder_dat_trend, aes(x = time, y = co2_pcap_cons, color = country)) +
  geom_line() +
  scale_x_continuous(name = "Jahr", guide = guide_axis(angle = 90))
```
:::
:::


## Legenden mergen



## Themes

Da würde man ja auch viel zur Legende ändern? 

## Koordinatensytem

- Polar, evtl. characters plot oder weltraumplot als beispiel

## Abspeichern
Vektor vs Raster (Rolfs 7)


Use characters data for demonstration or for exercise? 
