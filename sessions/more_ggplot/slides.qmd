---
title: "Mehr ggplot2!"
format: 
  letterbox-revealjs:
    code-block-height: 400px
---

```{r}
#| label: Load pacakges
#| echo: false

library(here)
library(tidyverse)
source(here::here("src", "themes.R"))
source(here::here("src", "functions.R"))
```


## Setup
```{r}
# install.packages(c("ggimage", "here", "tidyverse", "ggtext", "glue", "patchwork", "ggrepel"))

library(ggimage)
library(here)
library(patchwork)
library(tidyverse)
library(ggtext)
library(glue)
library(ggrepel)
```

## Datensatz

:::{.columns}

::: {.column width="50%"}

::: {.exercise}

Ladet die `characters`-Daten [hier]() herunter, und legt sie ebenfalls in eurem `data`-Ordner ab. 
Lest sie dann in R ein: 

```{r}
characters <- readRDS(here::here("data", "characters.rds"))
```

:::


![](./images/central_perk.jpg)

:::
::: {.column width="50%"}
\
\
\

- Psychometrische, crowd-sourced ratings f√ºr TV-Charaktere. 
- Zwei (mehr oder weniger) gegens√§tzliche Eigenschaften, werden auf einer Skala von 0 - 100 bewertet. 


:::
:::




::: image-ref
Foto von <a href="https://unsplash.com/de/@lgtts?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Ilse Orsel</a> auf <a href="https://unsplash.com/de/fotos/rot-weisses-unks-cafe-fwPHQB4kGzA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

## Aufbereitung {background-image="./images/yellow_umbrellas.jpg" background-size="1225px" background-repeat="repeat"}

::: {.exercise}

```{r}
shows <- c("How I Met Your Mother", "Friends")
quest_vec <- c(
  "doer/thinker",
  "jock/nerd",
  "dispassionate/romantic",
  "funny/humorless",
  "chaotic/orderly"
)

## Filtern von TV-Shows und Fragen
char_prepped <- characters %>%
  filter(uni_name %in% shows) %>%
  filter(question %in% quest_vec)
```

::: 




::: image-ref
Foto von <a href="https://unsplash.com/de/@simplelovelyuseful?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Catrin Johnson</a> auf <a href="https://unsplash.com/de/fotos/gelber-regenschirm-ym96FAhQ8o4?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::


## Wiederholung

Wir schauen uns jetzt Pers√∂nlichkeitseigenschaften von Charakteren aus [Friends](https://www.netflix.com/de/title/70153404) und [How I Met Your Mother](https://www.disneyplus.com/de-de/browse/entity-bc68ac79-3ace-4427-9ec0-5ee6f314d194) an.

::: {.panel-tabset}

### üèã √úbung

::: {.exercise}

Plotte die Ratings f√ºr die ausgew√§hlten Charactere `char_prepped`. Auf der x-Achse sollte die Frage `top_trait` zu sehen sein, auf der y-Achse das Rating. Styling machen wir sp√§ter! Au√üerdem sollten der Name der Charactere (`char_name`) nache `color` und der Name der TV-Show (`uni_name`) nach `shape` unterscheidbar sein.

:::

### L√∂sung
```{r}
#| output-location: column
#| fig-height: 4

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point()
```

:::


# Skalen und Legenden

:::{.quote}
Scales in ggplot2 control the [mapping from data to aesthetics]{.highlight}. They take your data and turn it into something that you can see, like size, colour, position or shape. ([ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/scales.html)) 
:::


## Legenden

:::{.columns}
::: {.column width="50%"}
![](./images/scales_legends.png)
:::
::: {.column width="50%"}
- Legenden werden [automatisch]{.highlight} erzeugt.
- [Jede]{.highlight} Skala bekommt eine Legende zugeordnet. 
- Sie nehmen die grafischen Eigenschaften (Aesthetics) und ordnen sie den Datenwerten zu.
Man kann sie daher als die [‚ÄûUmkehrfunktion‚Äú]{.highlight} der jeweiligen Skalen verstehen.
:::
:::


::: {.callout-info}
Legenden und Achsen sind funktional √§quivalent und werden in ggplot2 unter dem Begriff [guides]{.highlight} zusammengefasst.
:::



## 

[Jede Aesthetic]{.highlight} im Plot ist mit genau [einer Skala]{.highlight} verbunden: 


**Implizite Definition**


```{r}
#| output-location: column

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point()
```


## 

:::{.columns}

:::{.column width="50%"}

**Wird intern zu:**

::: {.panel-tabset}
 
### Code

```{r}
#| code-line-numbers: "6,7,8,9"
#| label: intern_scales
#| eval: false

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  scale_x_discrete() +
  scale_y_continuous() +
  scale_colour_discrete() +
  scale_shape_discrete()
```


### Plot

```{r}
#| label: intern_scales
#| echo: false
```

:::
:::

:::{.column width="50%"}

\
\
\

- `top_trait` ist eine diskrete Variable: `scale_x_discrete()`
- `avg_rating` ist kontinuierlich: `scale_y_continuous()`
- `char_name` und `uni_name` sind diskret: `scale_colour_discrete()` und `scale_shape_discrete()`

Das k√∂nnen wir uns zunutze machen, um manuell Scales zu definieren. 

:::
:::

## √Ñndern der Skalen-Defaults

```{r}
#| code-line-numbers: "5,6,7,8"
#| output-location: column

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  scale_x_discrete(name = "Eigenschaft") +
  scale_y_continuous(name = "Mittleres Rating") +
  scale_colour_discrete(name = "Charakter") +
  scale_shape_discrete(name = "Serie")
```

:::{.callout-warning}
Eigentlich w√ºrden wir daf√ºr `labs(x = "Eigenschaft", y = "Mittleres Rating", color = "Charakter", shape = "Serie")` nutzen. 
Wir sehen so aber, dass Achsen- und Legendentitel jeweils Skalennamen sind.  
:::

## Skalentypen

```{r}
#| code-line-numbers: "3,6,7"
#| output-location: column

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = avg_rating, shape = uni_name)
) +
  geom_point() +
  scale_y_log10(name = "Mittleren Rating log") +
  scale_colour_continuous()
```

Hier haben wir jetzt eine [log-transormierende]{.highlight} und eine [kontinuierliche]{.highlight} Skala. 

::: {.callout-tip}
Eine √úbersicht √ºber die m√∂glichen Skalentypen findet sich [hier](https://ggplot2tor.com/scales/). 
:::

## Anwendungsf√§lle: Farben/Formen

Oft macht es Sinn, die Farben direkt √ºber einen `named vector` zu definieren. 
Dadurch bekommen alle Plots, die diese Variablen nutzen, auch sicher die gleichen Aesthetics zugeordnet. 
Dadurch wird jedem Element in der color-Variable genau die gew√ºnschte Farbe zugeordnet:

```{r}
#| code-line-numbers: "1,2,3,10"
#| output-location: column
#| fig-height: 4


char_colors <- c(
  "Ted Mosby" = "blue", "Robin Scherbatsky" = "red", "Barney Stinson" = "green", "Lily Aldrin" = "purple", "Marshall Eriksen" = "orange", "Rachel Green" = "pink", "Monica Geller" = "brown", "Phoebe Buffay" = "yellow", "Joey Tribbiani" = "cyan"
)

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point(size = 3) +
  scale_colour_manual(values = char_colors)
```

## Anwendungsf√§lle: Farben/Formen

Genauso funktioniert das f√ºr Formen:

```{r}
#| code-line-numbers: "4,12"
#| output-location: column
#| fig-height: 4


char_colors <- c(
  "Ted Mosby" = "blue", "Robin Scherbatsky" = "red", "Barney Stinson" = "green", "Lily Aldrin" = "purple", "Marshall Eriksen" = "orange", "Rachel Green" = "pink", "Monica Geller" = "brown", "Phoebe Buffay" = "yellow", "Joey Tribbiani" = "cyan"
)
char_shapes <- c("Friends" = 12, "How I Met Your Mother" = 18)

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point(size = 3) +
  scale_colour_manual(values = char_colors) +
  scale_shape_manual(values = char_shapes)
```

## Anwendungsf√§lle: Skalen-Ticks

:::{.panel-tabset}
### √úbung

::: {.exercise}
Versuche, die y-Achse so zu skalieren, dass sie von 0 bis 100 geht und in 10er Schritten skaliert ist. 
Nutze die interne R-Hilfe, aber verzichte auf Internet/KI.

```{r}
#| eval: false

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point()
```

:::

### L√∂sung
```{r}
#| output-location: column
#| code-line-numbers: "6,7,8,9,10"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  scale_y_continuous(
    name = "Mittleres Rating",
    breaks = seq(0, 100, by = 10),
    limits = c(0, 100)
  )
```

:::

## Scale Guides

Jede Skala (und damit jede Aesthetic) bekommt einen Guide zugeordnet. 
Intern passiert das √ºber `guides()`. Wir k√∂nnen `guides()` also nutzen, um die Legende zu stylen:


```{r}
#| code-line-numbers: "5,6,7,8,9,10,11"
#| output-location: column

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(color = guide_legend(
    title = "Charaktere",
    ncol = 2, ## Mehr Spalten in der Legende
    reverse = TRUE, ## Reihenfolge umkehren
    override.aes = list(size = 3)
  )) ## Gr√∂√üe der Punkte in der Legende √§ndern
```

## M√∂gliche guide-Funktionen {#turn_axis}

::: {.columns}

:::{.column width="35%"}
- `guide_colourbar()`
- `guide_coloursteps()`
- `guide_axis()`
- `guide_legend()`
- `guide_bins()`
::: 
:::{.column width="65%"}

:::{.panel-tabset}

### üèã √úbung

::: {.exercise}
Nutze das gerade gelernte und versuche, die x-Achsenbeschriftung um 90 Grad zu drehen, um sie lesbarer zu machen. 
Nutze die interne R-Hilfe, aber versuche, es ohne Internet/KI zu l√∂sen:


```{r}
#| eval: false

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point()
```

:::

### L√∂sung

```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90))
```

Ich nutze au√üerdem die Spalte `top_trait`, damit die Achsenbeschriftung k√ºrzer wird.
Das sieht schon besser aus, aber wir haben ein [Overplotting-Problem]()!


:::
:::
:::




# Text-Geoms 

::: {.columns}
::: {.column width="50%"}

::: {.image-ref2}
Foto von <a href="https://unsplash.com/de/@foxfox?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Natalia Y.</a> auf <a href="https://unsplash.com/de/fotos/grauer-schmuck-mit-verschiedenen-buchstaben-in-braunen-organizer-boxen-aus-holz-Oxl_KBNqxGA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

:::
::: {.column width="50%"}
![](./images/font.jpg){.image-right}
:::
:::



## 

::: {.columns}


::: {.column width="50%"}

`geom_label{}`

::: {.panel-tabset}

### Plot

```{r}
#| label: geom_text
#| echo: false
#| code-line-numbers: "5"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, shape = uni_name)
) +
  geom_label(aes(label = char_name))
```

### Code

```{r}
#| label: geom_text
#| eval: false
#| code-line-numbers: "5"

```
:::
:::
::: {.column width="50%"}

`geom_text()` (mit `ggrepel`)

::: {.panel-tabset}
### Plot

```{r}
#| output-location: column
#| label: ggrepel
#| echo: false
#| code-line-numbers: "7"

library(ggrepel)

ggplot(
  data = char_prepped,
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text_repel(aes(label = char_name))
```

### Code

```{r}
#| label: ggrepel
#| eval: false
#| code-line-numbers: "7"

```

:::
:::
:::

## ggtext

[ggtext](https://wilkelab.org/ggtext/) erlaubt es, Markdown und HTML-Code in ggplot2 zu nutzen. 

```{r}
#| output-location: column

library(ggtext)

char_prepped_2 <- char_prepped %>%
  mutate(char_name_label = case_when(
    char_name == "Monica Geller" & top_trait == "orderly" ~ "Monica ist sehr <span style='color:black'>ordentlich</span>",
    TRUE ~ NA
  ))

ggplot(
  data = char_prepped_2,
  mapping = aes(x = top_trait, y = avg_rating, shape = uni_name, label = char_name_label, color = char_name)
) +
  geom_point() +
  geom_richtext(
    nudge_x = 0.75, nudge_y = 1, fill = NA, label.color = NA, # remove background and outline
    label.padding = grid::unit(rep(0, 4), "pt")
  )
```

## ggtext

::: {.panel-tabset}

### Code

```{r}
#| label: ggtext_bold
#| eval: false
#| code-line-numbers: "1,2,11,12,13"
#| fig.width: 12

char_prepped_3 <- char_prepped %>%
  mutate(char_name_bold = paste0("**", char_name, "**"))


ggplot(
  data = char_prepped_3,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  facet_wrap(vars(char_name_bold)) +
  theme(
    strip.text = element_markdown()
  )
```

### Plot

```{r}
#| label: ggtext_bold
#| echo: false
#| fig.width: 12

```

:::

# Adjustment: hjust/vjust vs. nudge_x/nudge_y

## hjust

::: {.columns}

::: {.column width="33%"}

```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Lily Aldrin"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), hjust = 0.5)
```

:::

::: {.column width="33%"}
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Lily Aldrin"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), hjust = 0)
```
:::

::: {.column width="33%"}
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Lily Aldrin"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), hjust = 1)
```
:::
:::

## vjust
::: {.columns}

::: {.column width="33%"}
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Ted Mosby"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), vjust = 1)
```

:::

::: {.column width="33%"}
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Ted Mosby"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), vjust = 0)
```
:::

::: {.column width="33%"}
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Ted Mosby"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), vjust = -1)
```
:::
:::


## Nudging

Nudging erfolgt auf der gleichen Skala wie die Werte. 

::: {.columns}

::: {.column width="50%"}

Nudge um eine halbe Einheit nach rechts. 
```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Rachel Green"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), nudge_x = 0.5)
```

:::

::: {.column width="50%"}

Nudge um 5 Einheiten nach unten.

```{r}
#| code-line-numbers: "6"

ggplot(
  data = char_prepped %>% filter(char_name == "Rachel Green"),
  mapping = aes(x = bottom_trait, y = avg_rating, shape = uni_name)
) +
  geom_point() +
  geom_text(aes(label = char_name), nudge_y = -5)
```

:::
:::




# Faceting

::: {.columns}
::: {.column width="50%"}

\
\

[Aufteilen]{.highlight} des Plots nach einer oder mehr Gruppen

:::
::: {.column width="50%"}
![](./images/windows.jpg){.image-right}


\

:::{.image-ref2}
Foto von <a href="https://unsplash.com/de/@cloudett?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Laura Cleffmann</a> auf <a href="https://unsplash.com/de/fotos/weisses-gerahmtes-glasfenster-tagsuber-z3drmcczVTc?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::

:::
:::

## Faceting
Anordnen von einer *einzelnen* Variable in einem Raster:

:::{.columns}
:::{.column width="50%"}

`facet_wrap()`: Erstellt ein [Band]{.highlight} aus Kacheln

:::{.panel-tabset}

### Plot
```{r}
#| code-line-numbers: "7"
#| label: wrap_1d
#| echo: false
#| fig-height: 4


ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")), ## Subset wegen Platzproblemen
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_wrap(vars(char_name), nrow = 4)
```

### Code

```{r}
#| label: wrap_1d
#| eval: false
#| code-line-numbers: "7"
```

:::
:::
::: {.column width="50%"}

`facet_grid()`: Erstellt ein [Grid]{.highlight} aus Kacheln


:::{.panel-tabset}

### Plot
```{r}
#| code-line-numbers: "7"
#| label: grid_1d
#| echo: false
#| fig-height: 4


ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_grid(char_name ~ .)
```

### Code

```{r}
#| label: grid_1d
#| eval: false
#| code-line-numbers: "7"
```

:::

:::
:::


## 

::: {.panel-tabset}

### üèã √úbung

::: {.exercise}
Versuche nun, den Plot √ºber zwei Dimensionen (`char_name` und `uni_name`) zu facetten, entweder mit `facet_wrap()` oder `facet_grid()`.

```{r}
#| output-location: column

ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90))
```

:::

### L√∂sung

::: {.panel-tabset}

### `facet_wrap()`

```{r}
#| code-line-numbers: "7"
#| output-location: column

ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_wrap(vars(char_name, uni_name), nrow = 4)
```

### `facet_grid()`

```{r}
#| output-location: column
#| code-line-numbers: "7"

ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_grid(char_name ~ uni_name)
```

:::

::: 

## Facetting - Mehrere Variablen
Anordnen von *mehreren* Variable in einem Raster:

::: {.columns}
::: {.column width="50%"}

:::{.panel-tabset}

### Plot
```{r}
#| code-line-numbers: "7"
#| label: wrap_2d
#| echo: false
#| fig-height: 4.5


ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_wrap(vars(char_name, uni_name), nrow = 4)
```

### Code

```{r}
#| label: wrap_2d
#| eval: false
#| code-line-numbers: "7"
```

:::


:::

::: {.column width="50%"}

::: {.panel-tabset}

### Plot
```{r}
#| code-line-numbers: "7"
#| label: grid_2d
#| echo: false
#| fig-height: 4.5


ggplot(
  data = char_prepped %>% filter(char_name %in% c("Robin Scherbatsky", "Monica Geller", "Barney Stinson", "Joey Tribbiani")),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  guides(x = guide_axis(angle = 90)) +
  facet_grid(char_name ~ uni_name)
```

### Code

```{r}
#| label: grid_2d
#| eval: false
#| code-line-numbers: "7"
```

:::
:::

:::


## Facetting - Tipps
Plot alle Punkte

::: {.panel-tabset}

### Plot

```{r}
#| label: facet_tips1
#| echo: false
#| fig-width: 12


char_prepped_background <- char_prepped %>%
  mutate(char_name_bg = char_name) %>%
  select(-char_name)

ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  # background lines: drawn in every facet, grouped by country_bg
  geom_jitter(
    data = char_prepped_background,
    aes(group = char_name_bg),
    color = "grey70",
    alpha = 0.7,
    size = 1,
    height = 0,
    width = 0.1
  ) +
  geom_point(size = 2) +
  guides(x = guide_axis(angle = 90)) +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw()
```

### Code

```{r}
#| eval: false
#| label: facet_tips1
```

:::



## Facetting - Tipps
Plot Mittelwerte

::: {.panel-tabset}

### Plot
```{r}
#| label: facet_tips2
#| echo: false
#| fig-width: 12
#| code-line-numbers: "1,2,3,4,5,7,8,9,10,11,12,13,14,15"


dat_mean <- char_prepped %>%
  group_by(top_trait) %>%
  summarise(mean_rating = mean(avg_rating)) %>%
  ungroup()


ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point(
    data = dat_mean,
    aes(x = top_trait, y = mean_rating),
    inherit.aes = FALSE,
    color = "grey70",
    size = 3,
    alpha = 0.7
  ) +
  geom_point() +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw()
```

### Code
```{r}
#| label: facet_tips2
#| eval: false
#| code-line-numbers: "1,2,3,4,5,7,8,9,10,11,12,13,14,15"
```

:::

:::{.callout-warning}
Standardisierung k√∂nnte beim Vergleich zwischen den Fragen helfen - das kommt aber auf die finale Fragestellung an. 
Ist aber ein Punkt, den man zumindest im Hinterkopf behalten sollte.
:::

## 

::: {.panel-tabset}

### üèã √úbung

::: {.exercise}

Versuche nun, einen Lollipop-Plot aus diesem Plot zu machen. 

```{r}
#| output-location: column


dat_mean <- char_prepped %>%
  group_by(top_trait) %>%
  summarise(mean_rating = mean(avg_rating)) %>%
  ungroup()


ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point(
    data = dat_mean,
    aes(x = top_trait, y = mean_rating),
    inherit.aes = FALSE,
    color = "grey70",
    size = 3,
    alpha = 0.7
  ) +
  geom_point() +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw()
```

:::


### L√∂sung
```{r}
#| output-location: column
#| code-line-numbers: "20,21,22,23,24,25,26,27,28"


dat_mean <- char_prepped %>%
  group_by(top_trait) %>%
  summarise(mean_rating = mean(avg_rating)) %>%
  ungroup()


ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point(
    data = dat_mean,
    aes(x = top_trait, y = mean_rating),
    inherit.aes = FALSE,
    color = "grey70",
    size = 3,
    alpha = 0.7
  ) +
  geom_point() +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5,
    alpha = 0.5
  )
```

:::

## Sortieren
Sortieren, l√§uft in ggplot2 oft √ºber `factor()`. 


```{r}
char_prepped$uni_name <- factor(char_prepped$uni_name, levels = c("How I Met Your Mother", "Friends"))
```

Jetzt ist die Reihenfolge der Facetten umgekehrt: 

```{r}
#| output-location: column
#| code-line-numbers: "6"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  facet_wrap(vars(uni_name), nrow = 4) +
  theme_bw()
```



# Themes
## Themes

- Mit Themes kann man die [nicht datenbezogenen]{.highlight} Elemente eines Plots einstellen. Das ist z.B. `plot.title` oder `axis.ticks.x`. 
- Zu jedem Theme-Element geh√∂rt eine Element-Funktion: Oft brauchen wir z.B. `element_text()`, mit welchem wir z.B. den Titel stylen k√∂nnen: Farbe, Schriftart ...
- Es gibt bereits vorgefertigte Themes, man kann aber auch einzelne Element mit `theme()` √ºberschreiben. 

## Themes: Vorgefertigt

```{r}
#| output-location: column
#| code-line-numbers: "7"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  facet_wrap(vars(uni_name), nrow = 4) +
  theme_dark()
```

::: {.callout-info}
Eine √úbersicht √ºber Standard-Themes findet ihr [hier](https://ggplot2.tidyverse.org/reference/ggtheme.html). Das Paket [`ggthemes`](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) bietet noch weitere Themes an.
:::

## Themes: Anpassen

```{r}
#| output-location: column
#| code-line-numbers: "12"

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)
) +
  geom_point() +
  facet_wrap(vars(uni_name), nrow = 4) +
  theme_bw() +
  labs(
    title = "Charaktereigenschaften von TV-Charakteren",
    subtitle = "Friends vs. How I Met Your Mother"
  ) +
  theme(plot.title = element_text(color = "red"))
```


## 

::: {.panel-tabset}

### üèã √úbung


::: {.exercise}

::: {.columns}

::: {.column width = "50%"}

Style nun unseren Lollipop-Plot mit einem vorgefertigtem Theme deiner Wahl.

Passe danach folgendes an: 

- Setze die Hintergrundfarbe der Legende und des Plots auf "#06402B". Daf√ºr wird ein anderes `element_` gebraucht. Findest du heraus welches? 
- Setze die Textfarbe im gesamten Plot auf wei√ü.
- Versuche, die x-Achsen-Label innerhalb von `themes()` zu drehen. Wir hatten das vorhin schon einmal in [`guides()`](#turn_axis) gemacht. 
- Optional: √Ñndere die [Schriftart](https://nickhaf.github.io/PlotWorkshop/sessions/good_plots/visual_form.html#/schriftart-1) mit `showtext`.

:::
::: {.column width ="50%"}

```{r}
#| eval: false


dat_mean <- char_prepped %>%
  group_by(top_trait) %>%
  summarise(mean_rating = mean(avg_rating)) %>%
  ungroup()


ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point(
    data = dat_mean,
    aes(x = top_trait, y = mean_rating),
    inherit.aes = FALSE,
    color = "grey70",
    size = 3,
    alpha = 0.7
  ) +
  geom_point() +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5,
    alpha = 0.5
  ) +
  labs(
    title = "Charaktereigenschaften von TV-Charakteren",
    subtitle = "Friends vs. How I Met Your Mother"
  )
```

::: 
:::
:::

### L√∂sung

```{r}
#| output-location: column
#| fig.showtext: TRUE

library(showtext)
font_add_google("Playfair Display")


dat_mean <- char_prepped %>%
  group_by(top_trait) %>%
  summarise(mean_rating = mean(avg_rating)) %>%
  ungroup()


ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name)) +
  geom_point(
    data = dat_mean,
    aes(x = top_trait, y = mean_rating),
    inherit.aes = FALSE,
    color = "grey70",
    size = 3,
    alpha = 0.7
  ) +
  geom_point() +
  facet_wrap(vars(char_name)) +
  guides(color = "none") +
  theme_bw() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5,
    alpha = 0.5
  ) +
  labs(
    title = "Charaktereigenschaften von TV-Charakteren",
    subtitle = "Friends vs. How I Met Your Mother"
  ) +
  theme(
    legend.background = element_rect(fill = "#06402B"),
    plot.background = element_rect(fill = "#06402B"),
    text = element_text(color = "white", family = "Playfair Display"),
    axis.text = element_text(color = "white"),
    axis.text.x = element_text(angle = 90)
  )
```


:::


# Kordinatensysteme

::: {.columns}
::: {.column width="50%"}

:::
::: {.column width="50%"}
![](./images/coords.jpg){.image-right}
:::
:::

::: {.fig-ref2}
Foto von <a href="https://unsplash.com/de/@ujjwalchettri?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Ujjwal Chettri</a> auf <a href="https://unsplash.com/de/fotos/ein-paar-vogel-sitzen-auf-einer-stromleitung-4sJ05kCGTCc?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
      
:::

## Koordinatensysteme


Zwei Aufgaben: 

- Kombinieren der Positions-Aesthetics (Positions 1 & Position 2) zu einem 2d Raum. 
  - Linear: x & y
  - Polar: Winkel und Radius
  - Karte: Breite und L√§nge
- Zeichnen der Achsen und Rasterlinien

## Typen

::: {.columns}
::: {.column width="50%"}
### Linear

- `coord_cartesian()`: Default
- `coord_flip`: Tauscht x und y Achse
- `coord_fixed()`: Fixes Seitenverh√§ltnis. 
:::

::: {.column width="50%"}
### Nicht-linear

- `coord_map`: Kartenprojektion
- `coord_polar`: Polar-Koordinaten (Kreise)
- `coord_trans`: Transformation der Positionen
:::
:::


## Polar-Koordinaten

::: {.panel-tabset}

### Plot

```{r}
#| label: polar_coords
#| echo: false
#| fig-width: 10
#| fig-height: 6

ggplot(
  data = char_prepped,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name, group = top_trait)
) +
  geom_point() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5
  ) +
  ylim(0, 100) +
  facet_wrap(vars(char_name)) +
  coord_polar()
```

### Code  

```{r}
#| label: polar_coords
#| eval: false
```

:::


# Kombinieren 

::: {.columns}

::: {.column width="50%"}

:::
::: {.column width="50%"}
![](./images/rug.jpg){.image-right}
:::
:::


::: {.image-ref}
Foto von <a href="https://unsplash.com/de/@raulcachophoto?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Ra√∫l Cacho Oses</a> auf <a href="https://unsplash.com/de/fotos/drei-farblich-sortierte-quilts-z4x9ITBe040?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
      
:::

## Patchwork

Ich erstelle mir hier zwei gesonderte Plots, einmal nur mit Robin Scherbatsky und einmal mit allen anderen Charakteren. 

```{r}
char_prepped_robin <- char_prepped %>%
  filter(char_name == "Robin Scherbatsky")


p_robin <- ggplot(
  data = char_prepped_robin,
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name, group = top_trait)
) +
  geom_point() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5
  ) +
  ylim(0, 100) +
  facet_wrap(vars(char_name)) +
  coord_polar() +
  theme_minimal()

p_rest <- ggplot(
  data = char_prepped %>% filter(!char_name == "Robin Scherbatsky"),
  mapping = aes(x = top_trait, y = avg_rating, colour = char_name, shape = uni_name, group = top_trait)
) +
  geom_point() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5
  ) +
  ylim(0, 100) +
  facet_wrap(vars(char_name)) +
  coord_polar() +
  theme_minimal()
```



## Patchwork

[Patchwork](https://patchwork.data-imaginist.com/) erlaubt es, Plots zu kombinieren.

```{r}
#| fig-width: 14

library(patchwork)

p_robin +
  p_rest
```



## Patchwork: Stylen

```{r}
#| fig-width: 14

library(patchwork)

p_robin +
  p_rest +
  plot_layout(widths = c(1, 2))
```



## Spider-Plot

::: {.image-ref}

Vorlage von  [Tanya Shapiro](https://github.com/tashapiro/tanya-data-viz/blob/main/westworld/code/ww-radar-plot.R)

:::


```{r}
#| echo: false
#| fig.width: 13
#| fig.height: 8

coord_radar <- function(theta = "x", start = 0, direction = 1) {
  theta <- match.arg(theta, c("x", "y"))
  r <- if (theta == "x") {
    "y"
  } else {
    "x"
  }

  # dirty
  rename_data <- function(coord, data) {
    if (coord$theta == "y") {
      plyr::rename(data, c("y" = "theta", "x" = "r"), warn_missing = FALSE)
    } else {
      plyr::rename(data, c("y" = "r", "x" = "theta"), warn_missing = FALSE)
    }
  }
  theta_rescale <- function(coord, x, scale_details) {
    rotate <- function(x) (x + coord$start) %% (2 * pi) * coord$direction
    rotate(scales::rescale(x, c(0, 2 * pi), scale_details$theta.range))
  }

  r_rescale <- function(coord, x, scale_details) {
    scales::rescale(x, c(0, 0.4), scale_details$r.range)
  }

  ggproto("CordRadar", CoordPolar,
    theta = theta, r = r, start = start,
    direction = sign(direction),
    is_linear = function(coord) TRUE,
    render_bg = function(self, scale_details, theme) {
      scale_details <- rename_data(self, scale_details)

      theta <- if (length(scale_details$theta.major) > 0) {
        theta_rescale(self, scale_details$theta.major, scale_details)
      }
      thetamin <- if (length(scale_details$theta.minor) > 0) {
        theta_rescale(self, scale_details$theta.minor, scale_details)
      }
      thetafine <- seq(0, 2 * pi, length.out = 100)

      rfine <- c(r_rescale(self, scale_details$r.major, scale_details))

      # This gets the proper theme element for theta and r grid lines:
      #   panel.grid.major.x or .y
      majortheta <- paste("panel.grid.major.", self$theta, sep = "")
      minortheta <- paste("panel.grid.minor.", self$theta, sep = "")
      majorr <- paste("panel.grid.major.", self$r, sep = "")

      ggplot2:::ggname("grill", grid::grobTree(
        ggplot2:::element_render(theme, "panel.background"),
        if (length(theta) > 0) {
          ggplot2:::element_render(
            theme, majortheta,
            name = "angle",
            x = c(rbind(0, 0.4 * sin(theta))) + 0.5,
            y = c(rbind(0, 0.4 * cos(theta))) + 0.5,
            id.lengths = rep(2, length(theta)),
            default.units = "native"
          )
        },
        if (length(thetamin) > 0) {
          ggplot2:::element_render(
            theme, minortheta,
            name = "angle",
            x = c(rbind(0, 0.4 * sin(thetamin))) + 0.5,
            y = c(rbind(0, 0.4 * cos(thetamin))) + 0.5,
            id.lengths = rep(2, length(thetamin)),
            default.units = "native"
          )
        },
        ggplot2:::element_render(
          theme, majorr,
          name = "radius",
          x = rep(rfine, each = length(thetafine)) * sin(thetafine) + 0.5,
          y = rep(rfine, each = length(thetafine)) * cos(thetafine) + 0.5,
          id.lengths = rep(length(thetafine), length(rfine)),
          default.units = "native"
        )
      ))
    }
  )
}

image_path <- here::here("sessions", "more_ggplot", "images", "character_images")

char_prepped2 <- char_prepped %>%
  mutate(image_link_local = paste0(image_path, "/", id, ".jpg")) %>%
  mutate(facet_id = case_when(
    char_name %in% c("Barney Stinson", "Joey Tribbiani") ~ "Barney & Joey",
    char_name %in% c("Ted Mosby", "Ross Geller") ~ "Ted & Ross",
    char_name %in% c("Robin Scherbatsky", "Rachel Green") ~ "Robin & Rachel",
    char_name %in% c("Lily Aldrin", "Monica Geller") ~ "Lily & Monica",
    char_name %in% c("Marshall Eriksen", "Chandler Bing") ~ "Marshall & Chandler"
  )) %>%
  filter(!is.na(facet_id)) ## Sorry Phoebe :(

char_prepped3 <- arrange(char_prepped2, top_trait)

char_prepped3 <- char_prepped3 %>%
  mutate(
    image_x = ifelse(uni_name == "Friends", -1, 1),
    image_x_coord = ifelse(uni_name == "Friends", "nerd", "romantic"), 
    nudge_x = ifelse(uni_name == "Friends", -0.35, -0.1)
  ) %>%
  arrange(top_trait)

outer_points <- char_prepped3 %>%
  mutate(
    max_rating = 100,
    label_y = 90,
    nudge_x = ifelse(uni_name == "Friends", -0.14, 0.14)
  )


dat_joey_barney <- char_prepped3 %>%
  filter(char_name %in% c("Barney Stinson", "Joey Tribbiani"))


outer_points_joey_barney <- dat_joey_barney %>%
  mutate(
    max_rating = 100,
    label_y = 95,
    nudge_x = ifelse(uni_name == "Friends", -0.1, 0.1)
  )

p_left <- ggplot(
  dat_joey_barney,
  aes(x = top_trait, y = avg_rating, group = char_name, color = uni_name, fill = uni_name)
) +
  geom_point(data = outer_points_joey_barney, aes(top_trait, max_rating), color = "white", inherit.aes = FALSE) +
  geom_richtext(
    data = outer_points_joey_barney, aes(top_trait, label_y, label = round(avg_rating, 0), color = uni_name), inherit.aes = FALSE, fill = NA, label.color = NA,
    label.padding = grid::unit(rep(0, 4), "pt"), nudge_x = outer_points_joey_barney$nudge_x, size = 2.75
  ) +
  geom_point(size = 3) +
  geom_polygon(alpha = 0.2, linewidth = 1.5) +
  facet_wrap(vars(facet_id), ncol = 2) +
  ylim(0, 100) +
  coord_radar() +
  scale_fill_manual(values = c("Friends" = "#36d1ab", "How I Met Your Mother" = "#FFED29")) +
  scale_color_manual(values = c("Friends" = "#9C8CD4", "How I Met Your Mother" = "#FFED29")) +
  theme_bw() +
  labs(
    title = "The one where Everyone meets",
    subtitle = "Character ratings from 0 to 100"
  ) +
  geom_image(aes(x = image_x_coord, y = 100, image = image_link_local),
    nudge_x = -0.45,
    nudge_y = 5,
    size = 0.12
  ) +
  geom_image(aes(x = image_x_coord, y = 100, image = image_link_local),
    nudge_x = -0.45,
    nudge_y = 5,
    size = 0.1, inherit.aes = FALSE
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.text.x = element_text(color = "white", face = "bold"),
    axis.text.y = element_blank(),
    axis.title = element_blank(),
    panel.background = element_rect(fill = "#06402B"),
    plot.background = element_rect(fill = "#06402B"),
    title = element_text(color = "white", size = 16, face = "bold"),
    strip.background = element_rect(fill = "#06402B"),
    strip.text = element_text(color = "white", face = "bold"),
    legend.background = element_rect(fill = "#06402B"),
    legend.position = "none"
  )

outer_points2 <- outer_points %>%
  filter(!char_name %in% c("Barney Stinson", "Joey Tribbiani"))

p_right <- ggplot(
  char_prepped3 %>% filter(!char_name %in% c("Barney Stinson", "Joey Tribbiani")),
  aes(x = top_trait, y = avg_rating, group = char_name, color = uni_name, fill = uni_name)
) +
  geom_point(data = outer_points2, aes(top_trait, max_rating), color = "white", inherit.aes = FALSE) +
  geom_richtext(
    data = outer_points2, aes(top_trait, label_y, label = round(avg_rating, 0), color = uni_name), inherit.aes = FALSE, fill = NA, label.color = NA,
    label.padding = grid::unit(rep(0, 4), "pt"), nudge_x = outer_points2$nudge_x, size = 2.75
  ) +
  geom_point(size = 3) +
  geom_polygon(alpha = 0.2, linewidth = 1) +
  facet_wrap(vars(facet_id), ncol = 2) +
  ylim(0, 100) +
  coord_radar() +
  scale_fill_manual(values = c("Friends" = "#36d1ab", "How I Met Your Mother" = "#FFED29")) +
  scale_color_manual(values = c("Friends" = "#9C8CD4", "How I Met Your Mother" = "#FFED29")) +
  theme_bw() +
  geom_image(aes(x = image_x_coord, y = 100, image = image_link_local),
    nudge_x = -0.45,
    nudge_y = 5,
    size = 0.12
  ) +
  geom_image(aes(x = image_x_coord, y = 100, image = image_link_local),
    nudge_x = -0.45,
    nudge_y = 5,
    size = 0.1, inherit.aes = FALSE
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.text.x = element_text(color = "white"),
    axis.text.y = element_blank(),
    axis.title = element_blank(),
    panel.background = element_rect(fill = "#053625"),
    plot.background = element_rect(fill = "#053625"),
    strip.background = element_rect(fill = "#053625"),
    strip.text = element_text(color = "white", face = "bold"),
    legend.position = "none"
  )



p_left +
  p_right
```



## üèã √úbung

::: {.exercise}


Wandle unseren Lollipop-Plot in einen Barplot um. Du brauchst daf√ºr `geom_col()`. Beachte dabei folgendes: 


- Die Fragen sollten jetzt auf der y-Achse stehen, die Ratings auf der x-Achse. 
- Facette nach Character-Namen `char_name`. 
- Die Balkenf√ºllung soll eine kontinuierliche Farbskala sein, die das Rating kodiert `avg_rating`.
- Nutze eine andere Color-Palette, die gut f√ºr kontinuierliche Daten funktioniert.

::: {.callout-important}
Achtung, der Ausgangsplot (n√§chste Seite) sieht noch etwas komisch aus, weil er nicht facettiert ist. 
:::

:::


## üèã √úbung

::: {.panel-tabset}

### Ausgangscode

```{r}
#| eval: false

ggplot(char_prepped, aes(x = top_trait, y = avg_rating, colour = char_name)) +
  geom_point() +
  theme_bw() +
  geom_segment(
    aes(
      x = top_trait, xend = top_trait,
      y = 0, yend = avg_rating,
      group = interaction(char_name, uni_name)
    ),
    linewidth = 0.5,
    alpha = 0.5
  )
```


### L√∂sung

::: {.panel-tabset}

### Plot

```{r}
#| label: barplot_solution
#| echo: false
#| fig-width: 12


shows <- c("How I Met Your Mother", "Friends")
quest_vec <- c(
  "doer/thinker", "jock/nerd", "cold/warm", "main character/side character",
  "crazy/sane",
  "dispassionate/romantic",
  "high IQ/low IQ",
  "heroic/villainous",
  "funny/humorless",
  "chaotic/orderly",
  "plays hard/works hard",
  "cocky/timid",
  "old/young"
)

## Filtern von weiteren TV-Shows und Fragen
char_prepped <- characters %>%
  filter(uni_name %in% shows) %>%
  filter(question %in% quest_vec)

ggplot(char_prepped, aes(x = avg_rating, y = top_trait, fill = avg_rating)) +
  facet_grid(. ~ char_name) +
  geom_col(position = "identity", color = "black") +
  theme_bw() +
  xlim(c(0, 100)) +
  scale_fill_viridis_c(option = "D") 
```

### Code
```{r}
#| label: barplot_solution
#| eval: false
```

:::
