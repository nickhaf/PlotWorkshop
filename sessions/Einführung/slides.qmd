---
title: "Einführung"
format: letterbox-revealjs
---

```{r}
#| echo: false

library(ggplot2)
library(quartets)
library(tidyverse)
library(ggrepel)
library(ggthemes)
library(gganimate)
source(here::here("src", "themes.R"))
```




# Plotting


# Motivation

:::{.fragment}
:::{.quote}
Ein Bild sagt mehr als tausend ... Zahlen! 
:::
:::


## Datasaurus Dozen ([`quartets`-Paket](https://github.com/r-causal/quartets))

::: {.columns} 
::: {.column width="50%"}

```{r}
#| echo: false

df <- datasaurus_dozen[sample(nrow(datasaurus_dozen), 12, replace = T),]
knitr::kable(df, digits = 2)
```

:::


::: {.column width="50%"}
:::{.fragment}
```{r}
#| echo: false
#| fig-height: 8
#| fig-width: 12

ggplot(datasaurus_dozen, aes(x = x, y = y)) +
  geom_point() +
  theme_bg() +
  ylim(0, 100)
```
:::

:::{.fragment}
:::{.callout-note}
In den Daten lässt sich kein Muster erkennen. 
:::
:::
:::

:::

## Datasaurus Dozen ([`quartets`-Paket](https://github.com/r-causal/quartets))

::: {.columns} 
::: {.column width="70%"}

```{r}
#| echo: false

datasaurus_dozen |>
  group_by(dataset) |>
  summarise(mean_x = mean(x),
            var_x = var(x),
            mean_y = mean(y),
            var_y = var(y),
            cor = cor(x, y)) |>
  knitr::kable(digits = 2)
```
:::

::: {.column width="30%"}
:::{.fragment}
:::{.callout-note}
Wir haben Deskriptivstatistiken für `dataset` berechnet. Mittelwerte, Varianzen und die jeweilige Korrelation zwischen x und y sind nahezu identisch.
:::
:::
:::

:::

## Datasaurus Dozen ([`quartets`-Paket](https://github.com/r-causal/quartets))

```{r}
#| echo: false
#| fig-height: 8
#| fig-width: 12


ggplot(datasaurus_dozen, aes(x = x, y = y)) +
  facet_wrap(~dataset, ncol = 5) +
  geom_point() +
  theme_bg() +
  ylim(0, 100)

```

:::{.fragment}
:::{.callout-note}
Das Muster in den Daten ist nun deutlich erkennbar.
:::
:::

## Warum Daten visualisieren?

:::{.fragment}
- Muster und Informationen lassen sich leichter erkennen.   
- Inhalte können schneller erfasst und verarbeitet werden.  
- Erkenntnisse lassen sich anschaulich an andere kommunizieren.  
- Grafiken lockern Texte auf.  
- Visuelle Darstellungen können mehrdimensional aufgebaut werden und so eine Vielzahl von Informationen gleichzeitig vermitteln.  
:::

## Warum in R?

:::{.fragment}
- Syntaxbasiert und reproduzierbar: Analysen und Grafiken können nachvollzogen und exakt repliziert werden.
- Flexibel: alles, was in R eingelesen werden kann, lässt sich auch visualisieren.
- Integration: statistische Analysen, Texte und Grafiken kommen „aus einem Guss“
- Open Source: frei verfügbar, mit einer großen und aktiven Community.
- Individuell anpassbar: eigene Funktionen und Vorlagen ermöglichen maßgeschneiderte Lösungen (z. B. Corporate Design der Uni).
- Kreativität: es gibt unzählige Möglichkeiten, sich kreativ auszutoben.
:::

## Warum mit ggplot2?

:::{.fragment}
- Konsistentes Prinzip: Grafiken werden nach einem einheitlichen Konzept aufgebaut ([Grammar of Graphics]{.highlight}).
- Hohe Flexibilität: einfache Plots lassen sich schnell erstellen, aber komplexe Visualisierungen sind ebenfalls möglich.
- Anpassbarkeit: fast jedes Detail lässt sich steuern und fein abstimmen.
- Publikationstauglich: Grafiken können präzise gestaltet und an professionelle Standards angepasst werden.
- Erweiterbarkeit: viele zusätzliche Pakete (z. B. für Karten, Zeitreihen, Interaktivität) erweitern ggplot2.
- Große Community: viele Beispiele, Tutorials und Unterstützung.
:::

## Und warum dieser Workshop?

:::{.fragment}
- Grafiken: Mächtiges Instrument der Datenanalyse und Ergebniskommunikation
- Es gibt aber einige Fallstricke und Dinge, die sich lohnen zu wissen
- Grafikerstellung ist Teil aller datenbasierten, wissenschaftlichen Disziplinen...
- ...aber wird kaum bis gar nicht im Studium behandelt
- WoMepS ist also eine prima Gelegenheit!
:::

## 

![](./images/horst_ggplot2.png){fig-width=80%}

::: image-ref
Abbildung von [Allison Horst](https://allisonhorst.com/r-packages-functions)
:::

## Vorerfahrungen

@NH: baust Du hier das Mentimeter ein? 

- Fachbereich  
- Vorerfahrungen in R  
- Vorerfahrungen in RStudio  
- Vorerfahrungen in ggplot  
- Vorerfahrungen mit Datenvisualisierung in gpplot  

# Organisatorisches 
@NH: hast Du ein passendes Bild? Wo kriegst Du die eigentlich immer her?

## Organisatorisches

:::{.callout-tip}
## Material

[https://nickhaf.github.io/PlotWorkshop/](https://nickhaf.github.io/PlotWorkshop/)
:::

:::{.callout-tip}
## Kontaktdaten

- Nicklas Hafiz: nicklas.jakob.hafiz@hu-berlin.de  
- Janine Buchholz: janine.buchholz@hu-berlin.de  
:::

:::{.callout-tip}
## Arbeiten in Zoom:   

- Handheben-Funktion für Wortmeldungen   
- Zoom-Chat für kleinere Fragen, Anmerkungen und Hilferufe    
- Breakout-Sessions für Gruppenarbeit   
- Teilen von zwei Screens: Folien, RStudio  
:::

# Galerie {background-image="images/gallery.jpg" background-size="1225px"}

## Eine der ersten Karten  {background-color="white"}

::: {.columns}
::: {.column width="40%"}
Dr. John Snow zeichnete die Todesfälle durch Cholera in Zentral-London im September 1854 auf.  
[Wasserpumpen wurden mit einem `x` markiert.]{.highlight}  
Dadurch ließ sich die [Broad Street Pumpe]{.highlight} als Quelle der Epidemie identifizieren. 
:::
::: {.column width="60%"}
![](./images/cholera_chart.png)
:::
:::

::: image-ref
Bild von [ReserachGate](https://www.researchgate.net/figure/Cholera-outbreak-in-London-in-1854-Deaths-marked-with-dots-Water-wells-marked-with-a_fig9_320654812)
:::

## {background-color="white"}

:::{.columns}
::: {.column width="100%"}

![](./images/password.png)

:::
:::

::: image-ref
Beispiel aus der [The R Graph Gallery](https://r-graph-gallery.com/web-circular-lollipop-plot-with-ggplot2.html). 
:::


## Der best Plot aller Zeiten?

![](images/napoleon.png)


Verluste der napoleonischen Armee beim Russlandfeldzug 1812–1813, von Charles Joseph Minard. 
Es werden [6 Dimensionen]{.highlight} dargestellt!    


::: image-ref
Image from [Wikipedia](https://en.wikipedia.org/wiki/File:Minard.png). 
:::


## 
<!-- @NH  dieser Plot wird bei mir auf der Folie nicht dargestellt -->

```{r}
#| echo: false
#| eval: false

# Load dataset from github (Surfer project)
data <- read.table("https://github.com/holtzy/data_to_viz/raw/master/Example_dataset/19_MapConnection.csv", header=T, sep=",")

# Download NASA night lights image
download.file("https://raw.githubusercontent.com/holtzy/data_to_viz/master/story/IMG/BlackMarble_2016_01deg.jpg",  destfile = "sessions/Einführung/images/BlackMarble_2016_01deg.jpg", mode = "wb")

# Count how many times we have each unique connexion + order by importance
summary <- data %>% 
  dplyr::count(homelat,homelon,homecontinent, travellat,travellon,travelcontinent) %>%
  arrange(n)

# A function that makes a dateframe per connection (we will use these connections to plot each lines)
data_for_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, group){
  inter <- geosphere::gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F)             
  inter=data.frame(inter)
  inter$group=NA
  diff_of_lon=abs(dep_lon) + abs(arr_lon)
  if(diff_of_lon > 180){
    inter$group[ which(inter$lon>=0)]=paste(group, "A",sep="")
    inter$group[ which(inter$lon<0)]=paste(group, "B",sep="")
  }else{
    inter$group=group
  }
  return(inter)
}

# Création d'un dataframe complet avec les points de toutes les lignes à faire.
# @NH: hast Du französisch annotiert? XD
data_ready_plot=data.frame()
for(i in c(1:nrow(summary))){
  tmp=data_for_connection(summary$homelon[i], summary$homelat[i], summary$travellon[i], summary$travellat[i] , i)
  tmp$homecontinent=summary$homecontinent[i]
  tmp$n=summary$n[i]
  data_ready_plot=rbind(data_ready_plot, tmp)
}
data_ready_plot$homecontinent=factor(data_ready_plot$homecontinent, levels=c("Asia","Europe","Australia","Africa","North America","South America","Antarctica"))

saveRDS(data_ready_plot, "./sessions/Einführung/surfdata.rds")

```

```{r}
#| echo: false
#| eval: false

library(jpeg)

# Load picture and render
earth <- jpeg::readJPEG("./images/worldmap.jpg", native = TRUE)
earth <- grid::rasterGrob(earth, interpolate = TRUE)

data_ready_plot <- readRDS("./surfdata.rds")
# Plot
p <- ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_line(data=data_ready_plot, aes(x=lon, y=lat, group=group, colour=homecontinent, alpha=n), size=0.3) +
  scale_color_brewer(palette="Set3") +
  theme_void() +
  theme(
        legend.position="none",
        panel.background = element_rect(fill = "black", colour = "black"), 
        panel.spacing=unit(c(0,0,0,0), "null"),
        plot.margin=grid::unit(c(0,0,0,0), "cm"),
  ) +
  ggplot2::annotate("text", x = -150, y = -45, hjust = 0, size = 8, label = paste("Where surfers travel."), color = "white") +
  ggplot2::annotate("text", x = -150, y = -51, hjust = 0, size = 5, label = paste("data-to-viz.com | NASA.gov | 10,000 #surf tweets recovered"), color = "white", alpha = 0.5) +
  #ggplot2::annotate("text", x = 160, y = -51, hjust = 1, size = 7, label = paste("Cacedédi Air-Guimzu 2018"), color = "white", alpha = 0.5) +
  xlim(-180,180) +
  ylim(-60,80) +
  scale_x_continuous(expand = c(0.006, 0.006)) +
  coord_equal() 

p
```


::: image-ref

Code von [https://www.data-to-viz.com/story/MapConnection.html].

:::



# {background-image="images/setup.jpg" background-size="1225px"}

::: {.absolute left="5%" top="5%" style="color:#F8F8F8;"}
Basic Setup
:::

::: image-ref
Foto von <a href="https://unsplash.com/de/@adigold1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Adi Goldstein</a> auf <a href="https://unsplash.com/de/fotos/graustufenfotografie-eines-mannes-im-gestreiften-hemd-rgkKFn5Ysb0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::




## RStudio Projekte

Hilft ungemein beim Organisieren von Dateien und Code!


\

::: {.exercise}
Erstelle ein RStudio Projekt in einem Ordner für diesen Workshop.
:::


## Pfade

[here](https://here.r-lib.org/) ist ein Paket zum Erstellen von Dateipfaden. 
Dadurch können Probleme mit relativen und absoluten Pfaden vermieden werden. 

`C:\Users\hafiznij\Documents\GitHub\IRT_workshop\data\gapminder_dat.rds` wird zu:  
`here::here("data", "gapminder_dat.rds")`. 


::: {.panel-tabset}

### Übung

::: {.exercise}

Lade die gapminder-Daten von [GitHub](https://github.com/nickhaf/PlotWorkshop/blob/main/data/gapminder_dat.rds) herunter und in R ein. 

:::



### Lösung

```{r}
# install.packages("here")
gapminder <- readRDS(here::here("data", "gapminder_dat.rds"))
```

:::

## Daten

:::{.columns}
:::{.column width = "50%"}


\
\

[Gapminder](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v2) ist ein non-profit Projekt mit dem Ziel, mit [global misconceptions]{.highlight} aufzuräumen. 
Grundlage dafür ist ein Datensatz mit sozioökonomischen Indikatoren für fast alle Länder der Welt über mehrere Jahrzehnte. 


:::
:::{.column width = "50%"}


![](./images/factfulness.jpg){.image-right}

:::
:::

::: image-ref
Bild von [Amazon](https://m.media-amazon.com/images/I/71KH-wJcv3L.jpg). 
:::


## Quiz {background-image="images/world.jpg" background-size="1225px"}

::: {.exercise}
Öffne [Mentimeter](https://www.mentimeter.com/app/presentation/alep3cierpqrz5cwkm6v2ege1h1tvhbi/edit?question=nw21zffqg1ti) und bearbeite das Quiz. 
:::

::: image-ref
Fragen von [Gapminder](https://upgrader.gapminder.org/).  
Foto von <a href="https://unsplash.com/de/@nasa?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">NASA</a> auf <a href="https://unsplash.com/de/fotos/foto-aus-dem-weltraum-Q1p7bh3SHj8?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
      
:::



# Zentrale Plot-Typen

## Scatterplot
::: {.columns}

:::{.column width = "50%"}

:::{.steckbrief}
[Datentyp]{.highlight}  numerisch & numerisch

[Achtung]{.highlight} Overplotting

[Erweiterungen]{.highlight}

- `geom_smooth()` für Anpassungslinie  
- `geom_jitter()` zur Vermeidung von overplotting  
- `alpha` zur Vermeidung von overplotting  
- `geom_text_repel()` zur Annotation von Datenpunkten  
- Kodierung zusätzlicher Variablen mittels Form, Farbe und/oder Größe der Datenpunkte

[Dokumentation:]{.highlight} [R Graph Gallery](https://r-graph-gallery.com/scatterplot.html)
:::


:::

:::{.column width = "50%"}
```{r}
#| echo: false

gapminder_2019 <- gapminder %>% 
  filter(time == 2019)

p_scatter <- ggplot(data = gapminder_2019, aes(x = gini, y = hapiscore_whr, color = world_4region)) +
  geom_point(size = 3)  +
  labs(x = "Gini-Koeffizient", y ="Happiness score (WHR)", color= "Weltregion")
p_scatter
```
:::
:::

## Scatterplot

::: {.panel-tabset}

### Plot
```{r}
#| label: example-scatter-plot
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_scatter
```

### Code

```{r}
#| label: example-scatter-code
#| eval: false

ggplot(data = gapminder_2019, aes(x = gini, y = hapiscore_whr, color = world_4region)) +
  geom_point(size = 3)  +
  labs(x = "Gini-Koeffizient", y ="Happiness score (WHR)", color= "Weltregion")
```
:::

## Scatterplot 

... hier noch eine ausgefeiltere Version einfügen ...

## Barplot

::: {.columns}
:::{.column width="50%"}

:::{.steckbrief}
[Datentyp]{.highlight} kategorial & numerisch  

[Achtung]{.highlight} nur sinnvoll bei bedeutungsvollem Nullpunkt der numerischen Variable

[Erweiterungen]{.highlight}  

- Hinzufügen von Fehlerbalken  
- Sortierung der Balken nach Ausprägung
- Vertauschung x- und y-Achse für vertikale Anordnung der Balken (leichtere Lesbarkeit der Labels)

[Dokumentation:]{.highlight} [R Graph Gallery](https://r-graph-gallery.com/barplot.html)
:::
:::

:::{.column width="50%"}

```{r}
#| echo: false
gapminder_2019_bar <- gapminder_2019 %>% 
  filter(world_6region == "europe_central_asia") %>% 
drop_na(unicode_region_subtag, gini)

p_bar <- ggplot(data = gapminder_2019_bar, aes(x = reorder(unicode_region_subtag, gini), y = gini)) +
  geom_bar(stat = "identity", color = "black", fill = "#F4BA02") +
  theme_bg()

p_bar
```

:::
:::


## Barplot

::: {.panel-tabset}

### Plot
```{r}
#| label: example-bar-code
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_bar

```

### Code

```{r}
#| label: example-bar-plot
#| eval: false

ggplot(data = gapminder_2019_bar, aes(x = reorder(unicode_region_subtag, gini), y = gini)) +
  geom_bar(stat = "identity", color = "black", fill = "#F4BA02") +
  theme_bg()
```


:::

## Lineplot

::: {.columns}
:::{.column width="50%"}

:::{.steckbrief}
[Datentyp]{.highlight} kontinuierlich (z.B. Zeitreihe) & kontinuierlich 

[Gut für]{.highlight} 

- Zeitreihen  
- y-Achsen-Variable hat keinen bedeutungsvollen Nullpunkt, Barplot somit ungeeignet 

<!-- [Achtung]{.highlight}  -->

[Erweiterungen]{.highlight}  

- Hinuzfügen weiterer Linien für zusätzliche Gruppen
- Annotation einzelner Bereiche der Linie
- Einfärben einzelner Bereiche unterhalb der Linie

[Dokumentation:]{.highlight} [R Graph Gallery](https://r-graph-gallery.com/line-plot.html)
:::
:::

:::{.column width="50%"}
```{r}
#| echo: false

gapminder_line <- gapminder %>% 
  filter(country %in% c("deu"), time >=1900, time <= 2024) %>% 
  drop_na(gini)

p_line <- ggplot(data = gapminder_line, aes(x = time, y = gini)) +
geom_line() +  
theme_bg() +
labs(title = "Ungleichheit in Deutschland On the Rise", 
     subtitle = "Gini-Koeffizient von 1900 bis 2024",
     x = "Jahr",
     y = "Gini-Koeffizient")

p_line
```
:::
:::



## Lineplot

::: {.panel-tabset}

### Plot
```{r}
#| label: example-line-plot
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_line
```

### Code

```{r}
#| label: example-line-code
#| eval: false

ggplot(data = gapminder_line, aes(x = time, y = gini)) +
geom_line() +  
theme_bg() +
labs(title = "Ungleichheit in Deutschland On the Rise", 
     subtitle = "Gini-Koeffizient von 1900 bis 2024",
     x = "Jahr",
     y = "Gini-Koeffizient")
```

:::


## Lineplot

::: {.panel-tabset}

### Plot
```{r}
#| label: example-line-plot_g7
#| fig-width: 14
#| fig-height: 7
#| fig-align: "center"
#| echo: false

gapminder_line_g7 <- gapminder %>% 
  filter(country %in% c("can", "fra", "deu", "ita", "jpn", "gbr", "usa"), time >=1900, time <= 2024) %>% 
  drop_na(gini)

labels_g7 <- c(
  "can" = "Kanada",
  "fra" = "Frankreich",
  "deu" = "Deutschland",
  "ita" = "Italien",
  "jpn" = "Japan",
  "gbr" = "Vereinigtes Königreich",
  "usa" = "USA"
)

gapminder_line_g7$country_de <- labels_g7[gapminder_line_g7$country]
gapminder_line_g7$country_de <- factor(gapminder_line_g7$country_de,
                        levels = sort(unique(gapminder_line_g7$country_de)))

p_line_g7 <- ggplot(data = gapminder_line_g7, aes(x = time, y = gini)) +
  geom_line(aes(col = country_de)) +  
  theme_bg() +
  labs(title = "Ungleichheit On the Rise", 
     subtitle = "Gini-Koeffizient in den G7-Staaten von 1900 bis 2024",
     x = "Jahr",
     y = "Gini-Koeffizient", 
     col = "G7-Staat") +
  scale_color_discrete(labels = labels_g7) +
  theme_solarized() # + 
  #scale_colour_solarized() 
p_line_g7
```

### Code

```{r}
#| label: example-line-code_g7
#| eval: false

gapminder_line_g7 <- gapminder %>% 
  filter(country %in% c("can", "fra", "deu", "ita", "jpn", "gbr", "usa"), time >=1900, time <= 2024) %>% 
  drop_na(gini)

labels_g7 <- c(
  "can" = "Kanada",
  "fra" = "Frankreich",
  "deu" = "Deutschland",
  "ita" = "Italien",
  "jpn" = "Japan",
  "gbr" = "Vereinigtes Königreich",
  "usa" = "USA"
)

gapminder_line_g7$country_de <- labels_g7[gapminder_line_g7$country]
gapminder_line_g7$country_de <- factor(gapminder_line_g7$country_de,
                        levels = sort(unique(gapminder_line_g7$country_de)))

p_line_g7 <- ggplot(data = gapminder_line_g7, aes(x = time, y = gini)) +
  geom_line(aes(col = country_de)) +  
  theme_bg() +
  labs(title = "Ungleichheit On the Rise", 
     subtitle = "Gini-Koeffizient in den G7-Staaten von 1900 bis 2024",
     x = "Jahr",
     y = "Gini-Koeffizient", 
     col = "G7-Staat") +
  scale_color_discrete(labels = labels_g7) +
  theme_solarized() # + 
  scale_colour_solarized() 
p_line_g7
```

:::


## Histogram

::: {.columns}
:::{.column width="50%"}

:::{.steckbrief}
[Datentyp]{.highlight} numerisch  

[Achtung]{.highlight} Wahl der 'bin size' bestimmt Eindruck der Verteilung 

[Erweiterungen]{.highlight}  

- Variation der 'bin size'  
- Vergleich zweier Verteilungen durch vertikale Anordnung bei Konstanthaltung der x-Achse  

[Dokumentation:]{.highlight} [R Graph Gallery](https://r-graph-gallery.com/histogram.html)
:::
:::

:::{.column width="50%"}

```{r}
#| echo: false

gapminder_2023 <- gapminder %>% 
  filter(time == 2023) 

p_histo <- ggplot(data = gapminder_2023, aes(x = hapiscore_whr)) +
  geom_histogram() +
  theme_bg() +
  labs(x = "Happiness", y = "", title = "World Happiness 2023")

p_histo
```

:::
:::



## Histogram

::: {.panel-tabset}

### Plot
```{r}
#| label: example-histo-plot
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_histo

```

### Code

```{r}
#| label: example-histo-code
#| eval: false

ggplot(data = gapminder_2023, aes(x = hapiscore_whr)) +
  geom_histogram() +
  theme_bg() +
  labs(x = "Happiness", y = "", title = "World Happiness 2023")
```

:::


## Histogram

... hier noch eine ausgefeiltere Version einfügen ...

## Boxplot

::: {.columns}
:::{.column width="50%"}

:::{.steckbrief}
[Datentyp]{.highlight} numerisch  

[Achtung]{.highlight} Dargestellt werden deskriptivstatistische Kennwerte (Min, Q1, Median, Q3, Max)

[Erweiterungen]{.highlight}  

- Vergleich der Verteilung zwischen Gruppen durch Hinzufügen zusätzlicher Boxplots  
- Sortierung mehrerer Boxplots hinsichtlich einer Statistik (z.B. Median)  
- Hinzufügen der tatsächlichen Datenpunkte  
- Unterdrücken von Ausreißern  
- Beschriftung von Ausreißern

[Dokumentation:]{.highlight} [R Graph Gallery](https://r-graph-gallery.com/boxplot.html)
:::
:::

:::{.column width="50%"}

```{r}
#| echo: false

gapminder_2023 <- gapminder %>% 
  filter(time == 2023) 

p_boxplot <- ggplot(data = gapminder_2023, aes(x = gini)) +
  geom_boxplot() +
  theme_bg() +
  labs(x = "Bevölkerung", y = "", 
       title = "Verteilung des Gini-Index", subtitle = "Jahr: 2023")

p_boxplot
```

:::
:::

## Boxplot

::: {.panel-tabset}

### Plot
```{r}
#| label: example-boxplot
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_boxplot
```

### Code

```{r}
#| label: example-boxplot-code
#| eval: false

ggplot(data = gapminder_2023, aes(x = gini)) +
  geom_boxplot() +
  theme_bg() +
  labs(x = "Bevölkerung", y = "", 
       title = "Verteilung des Gini-Index", subtitle = "Jahr: 2023")
```

:::

## Boxplot 

... hier noch eine ausgefeiltere Version einfügen ...


# Weitere Plot-Typen

## Kombiniert

Gruppenvergleich per Boxplot mit Datenpunkten und Violin Plot 

::: {.panel-tabset}

### Plot
```{r}
#| label: example-kombi
#| fig-width: 15
#| fig-height: 7
#| echo: false

gapminder_2023 <- gapminder %>% 
  filter(time == 2023) 

p_kombi <- ggplot(data = gapminder_2023, aes(x= world_4region, y = gini)) +
  geom_violin(aes(fill = world_4region, col = world_4region), alpha=.2, show_legend = FALSE) + 
  geom_jitter(height = 0, width=.2) + 
  geom_boxplot(fill=NA) +
  theme_bg() +
  labs(x = "Weltregion", y = "", fill = "Weltregion",
       title = "Verteilung des Gini-Index", subtitle = "Jahr: 2023")
p_kombi
```

### Code

```{r}
#| label: example-kombi-code
#| eval: false

ggplot(data = gapminder_2023, aes(x= world_4region, y = gini)) +
  geom_violin(aes(fill = world_4region), alpha=.2) + 
  geom_jitter(height = 0, width=.2) + 
  geom_boxplot(fill=NA) +
  theme_bg() +
  labs(x = "Bevölkerung", y = "", fill = "Weltregion",
       title = "Verteilung des Gini-Index", subtitle = "Jahr: 2023")
```

:::

## Bubble Chart

Scatterplot, in dem über Größe und Farbe der Datenpunkte zusätzliche Information dargestellt wird.

::: {.panel-tabset}

### Plot
```{r}
#| label: example-bubble-plot
#| fig-width: 15
#| fig-height: 7
#| echo: false

options(scipen=10)
# Farben der vier Weltregionen 
tuerkis <- rgb(0,213,233, max=255)
gruen <- rgb(127,235,0, max=255)
rot <- rgb(255,88,114, max=255)
gelb <- rgb(255,231,0, max=255)

gapminder |>
  # Auswahl der Daten von 2019:
  subset(time == 2019) |> 
    # Neu: Angabe der Einwohnerzahl in Millionen
  mutate(pop = pop/1000000) |>
  # Grund-Grafik anfordern:
  ggplot(aes(x=gini, y=hapiscore_whr)) +
  # Neu: Text für die Jahreszahl ("2015") einfügen, sodass diese ganz im Hintergrund steht
  annotate("text", x=45, y=50, label="2019", size=85, colour ="grey90", family="mono", fontface=1) +
  # Neu: Farbthema: heller Hintergrund, schwarze Linien an x- und y-Achse
  theme_classic() + 
  # Wie bisher: Punkte einzeichnen --> Streu-Punkt-Diagramm,
  # Neu: Unterscheidung der Punkte nach Farbe (Region) und Größe (Population);  
  # Transparenz der Datenpunkte (alpha), Rand um die Punkte (shape) 
  geom_point(aes(fill = world_4region, size = pop), shape=21, alpha=.7) +
  # Skalieren der Größe der Punkte, sodass die Unterschiede deutlicher sind
  scale_size(range = c(1, 30)) +
  # Neu: Beschriftung der Achsen
  labs(x="Gini-Index", y="Hyppiness Score") +
  # Neu: manuelle Spezifikation der y-Achse: Wertebereich, Position der Beschriftungen (10er-Schritte)
  scale_y_continuous(limits = c(15, 85), 
                     breaks = seq(20,80, by=10),
                     labels = paste0(seq(20,80, by=10), "%")) +
  # Neu: manuelle Spezifikation der x-Achse: Wertebereich, log-Transformation, Position und Name der Beschriftungen
  scale_x_continuous(limits = c(18,75),
                     breaks = seq(20,70, by= 5)) +
  # Neu: manuelle Spezifikation der Farben
  scale_fill_manual(
    values = c(tuerkis, gruen, rot, gelb),
    breaks = c("africa", "americas", "asia", "europe")) +
  # Neu: Theme (Anpassung der Schriftgroesse, relativ zur Groesse 12, blaues Raster im Hintergrund, Rand für die Legende)
  theme(text = element_text(size=12),
        axis.text = element_text(size=rel(.8)),
        axis.title = element_text(size=rel(1.2)),
        panel.grid.major = element_line(colour = "azure2")) +
  # Neu: Titel, Beschriftungen der Achse und Legende
  labs(title="Bubble Chart im Gapminder-Look",
       subtitle="Jahr: 2023",
       x="Gini-Index",
       y="Happiness Score (WHR)",
       fill="Weltregion",
       size="Einwohnerzahl\n(in Mio.)") +
  # Neu: Vergroessern der Punkte fuer die Farb-Legende fuer die Kontinente
  guides(fill = guide_legend(override.aes = list(size = 5), order=1)) 
```

### Code

```{r}
#| label: example-bubble-code
#| fig-width: 15
#| fig-height: 7
#| eval: false

options(scipen=10)
# Farben der vier Weltregionen 
tuerkis <- rgb(0,213,233, max=255)
gruen <- rgb(127,235,0, max=255)
rot <- rgb(255,88,114, max=255)
gelb <- rgb(255,231,0, max=255)

gapminder |>
  # Auswahl der Daten von 2019:
  subset(time == 2019) |> 
    # Neu: Angabe der Einwohnerzahl in Millionen
  mutate(pop = pop/1000000) |>
  # Grund-Grafik anfordern:
  ggplot(aes(x=gini, y=hapiscore_whr)) +
  # Neu: Text für die Jahreszahl ("2015") einfügen, sodass diese ganz im Hintergrund steht
  annotate("text", x=45, y=50, label="2019", size=70, colour ="grey90", family="mono", fontface=1) +
  # Neu: Farbthema: heller Hintergrund, schwarze Linien an x- und y-Achse
  theme_classic() + 
  # Wie bisher: Punkte einzeichnen --> Streu-Punkt-Diagramm,
  # Neu: Unterscheidung der Punkte nach Farbe (Region) und Größe (Population);  
  # Transparenz der Datenpunkte (alpha), Rand um die Punkte (shape) 
  geom_point(aes(fill = world_4region, size = pop), shape=21, alpha=.7) +
  # Skalieren der Größe der Punkte, sodass die Unterschiede deutlicher sind
  scale_size(range = c(1, 30)) +
  # Neu: Beschriftung der Achsen
  labs(x="Gini-Index", y="Hyppiness Score") +
  # Neu: manuelle Spezifikation der y-Achse: Wertebereich, Position der Beschriftungen (10er-Schritte)
  scale_y_continuous(limits = c(15, 85), 
                     breaks = seq(20,80, by=10),
                     labels = paste0(seq(20,80, by=10), "%")) +
  # Neu: manuelle Spezifikation der x-Achse: Wertebereich, log-Transformation, Position und Name der Beschriftungen
  scale_x_continuous(limits = c(18,75),
                     breaks = seq(20,70, by= 5)) +
  # Neu: manuelle Spezifikation der Farben
  scale_fill_manual(
    values = c(tuerkis, gruen, rot, gelb),
    breaks = c("africa", "americas", "asia", "europe")) +
  # Neu: Theme (Anpassung der Schriftgroesse, relativ zur Groesse 12, blaues Raster im Hintergrund, Rand für die Legende)
  theme(text = element_text(size=12),
        axis.text = element_text(size=rel(.8)),
        axis.title = element_text(size=rel(1.2)),
        panel.grid.major = element_line(colour = "azure2")) +
  # Neu: Titel, Beschriftungen der Achse und Legende
  labs(title="Bubble Chart im Gapminder-Look",
       subtitle="Jahr: 2023",
       x="Gini-Index",
       y="Happiness Score (WHR)",
       fill="Weltregion",
       size="Einwohnerzahl\n(in Mio.)") +
  # Neu: Vergroessern der Punkte fuer die Farb-Legende fuer die Kontinente
  guides(fill = guide_legend(override.aes = list(size = 5), order=1)) 
```

:::

::: image-ref
Abbildung in Anlehnung an die typische Darstellung auf [gapminder](https://www.gapminder.org/tools/#$model$markers$bubble$encoding$y$data$concept=hapiscore_whr&space@=geo&=time;;&scale$domain:null&zoomed:null&type:null;;&x$data$concept=inequality_index_gini&source=sg&space@=geo&=time;;&scale$domain:null&zoomed:null&type:null;;&frame$value=2019;;;;;&chart-type=bubbles&url=v2)
:::


## Karten

![](./images/ex_streets.png)

## Spider-Chart

![](./images/ex_spider.png){width="55%"}

::: image-ref
Abbildung aus der [R Graph Gallery](https://r-graph-gallery.com/142-basic-radar-chart.html)
:::


## Lollipop Chart

![](./images/ex_lollipop.png){image-height="50%"}

::: image-ref
Abbildung aus der [R Graph Gallery](https://r-graph-gallery.com/304-highlight-a-group-in-lollipop.html)
:::


## Ridgeline Plot

![](./images/ex_ridgeline.png){image-height=50%}


::: image-ref
Abbildung aus der [R Graph Gallery](https://r-graph-gallery.com/294-basic-ridgeline-plot.html#color)
:::

## Animiert: `gganimate`

```{r}
#| label: gganimate
#| fig-width: 14
#| fig-height: 7
#| echo: false

p_line_g7 + 
  transition_reveal(along = time) +# Linien werden über die Zeit "enthüllt"
  ease_aes("linear")  
```

## Interaktiv: `plotly`

...folgt...

## Generative Art

## {background-image="images/habeck.jpeg" background-size="1225px"}

::: image-ref
Bild von [Static](https://static.ksta.de/__images/2025/04/24/b3b17a0b-1da5-4e0f-9d6e-d321b248e1fa.jpeg?q=75&q=70&rect=0,259,4000,2250&w=2000&h=1334&fm=jpeg&s=cd6fd9eb8760f10aad114f59d21d74ce).
:::

