---
title: "Einführung"
format: letterbox-revealjs
---
```{r}
source(here::here("src", "themes.R"))
```


# Plotting


# Motivation

## Warum ggplot2?

## Einfach!
- Simple, schnelle Beispiele


## Beautiful
- Beispiele verschönert


# [The R Graph Gallery](https://r-graph-gallery.com/best-r-chart-examples.html)

## 

```{r}
#| echo: false

library(tidyverse)
library(ggtext)
library(patchwork)

library(showtext)
font_add_google("Roboto Mono", family = "special")

df_pw <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-14/passwords.csv') %>% 
  # Remove rows where the password is missing
  filter(!is.na(password))


df_pw_time <- 
  df_pw %>% 
  mutate(
    time = case_when(
      time_unit == "seconds" ~ value,
      time_unit == "minutes" ~ value * 60,
      time_unit == "hours" ~ value * 60 * 60,
      time_unit == "days" ~ value * 60 * 24,
      time_unit == "weeks" ~ value * 60 * 24 * 7,
      time_unit == "months" ~ value * 60 * 24 * 30,
      time_unit == "years" ~ value * 60 * 24 * 365,
      TRUE ~ NA_real_
    )
  ) 


plus <- 1000
df_pw_plot <-
  df_pw_time %>% 
  mutate(time = time + plus) %>% 
  add_row(rank = 501, time = 1)


labels <-
  df_pw_plot %>% 
  # Value > 90 selects those above 90 years!
  filter(value > 90) %>% 
  # Create label out of the password and its rank
  mutate(label = glue::glue("<b>{password}</b><br><span style='font-size:8pt'>Rank: {rank}</span>")) %>% 
  # These columns give the position of the labels
  add_column(
    x = c(33, 332, 401, 492),
    y = c(75000000, 90000000, 45000000, 48498112)
  )


main <- ggplot(df_pw_plot, aes(rank, time, color = category)) +
  # This segment represents the vertical lines
  geom_segment(
    aes(x = rank, xend = rank, y = 0, yend = time), 
    size = 0.5
  ) +
  # This rect is converted into the inner circle where we're going to place text
  # when converting the plot to circular coordinates.
  geom_rect(
    aes(xmin = 1, xmax = 501, ymin = 0, ymax = plus), 
    fill = "grey97", color = "grey97"
  ) + 
  
  # Add our custom grid lines for the radial axis.
  # These lines indicate one day, one week, one month and one year.
  geom_hline(aes(yintercept = (1 * 24 * 60 + plus)), color = "grey88") +
  geom_hline(aes(yintercept = (7 * 24 * 60 + plus)), color = "grey85") +
  geom_hline(aes(yintercept = (30 * 24 * 60 + plus)), color = "grey82") +
  geom_hline(aes(yintercept = (365 * 24 * 60 + plus)), color = "grey79") +
  
  # Add points on the end of each line
  geom_point(aes(size = time)) +
  
  # Polar axis (y-axis) is in log10 scale
  scale_y_log10(expand = c(0, 0)) +
  
  # Use the Prism color scale for the categories
  rcartocolor::scale_color_carto_d(palette = "Prism", guide = "none") +
  
  # Assign a range for the size of the dots
  scale_size(
    range = c(1, 8), 
    limits = c(plus, max(df_pw_plot$time)), 
    guide = "none"
  ) +
  
  # Make it circular!
  coord_polar() 


main <- main + 
  # Add labels with `geom_richtext()`
  geom_richtext(
    data = labels,
    aes(x = x, y = y, label = label, color = category),
     lineheight = 0.8,
     size = 2.5,
     family = "Roboto Mono",
     label.color = NA
  ) +
  # Regular text with `geom_text()`
  # Note that coordinates are explicitly passed here.
  geom_text(
    x = 500, y = 1.2,
    label = "********\nCracking\nYour Favorite\nPassword",
    family = "Roboto Mono Medium",
    size = 6,
    lineheight = 0.87,
    color = "grey60"
  ) +
  geom_text(
    x = 250, y = 0.25,
    label = "********",
    family = "Roboto Mono Medium",
    size = 6,
    lineheight = 0.87,
    color = "grey60"
  ) +
  geom_text(
    x = 250, y = 1.1,
    label = "Time it takes to crack the 500 most\ncommon passwords by online guessing.\nSorted by rank and colored by category.",
    family = "Roboto Mono",
    size = 2,
    lineheight = 0.87,
    color = "grey73"
  ) +
  geom_text(
    x = 250, y = 1.95,
    label = "Time is displayed on a logarithmic scale\nwith the rings representing one day,\none week, one month, and one year\n(from inner to outer ring).",
    family = "Roboto Mono",
    size = 2,
    lineheight = 0.87,
    color = "grey73"
  )

facet_data <- 
  df_pw_plot %>% 
  add_row(rank = 501, time = 1, category = unique(df_pw_plot$category)) %>% 
  # This is where we add line breaks
  mutate(
    cat_label = case_when(
      category == "cool-macho" ~ "cool-\nmacho",
      category == "nerdy-pop" ~ "nerdy-\npop",
      category == "password-related" ~ "password-\nrelated",
      category == "rebellious-rude" ~ "rebel-\nlious-\nrude",
      category == "simple-alphanumeric" ~ "simple-\nalpha-\nnumeric",
      TRUE ~ category
    )
  ) %>% 
  filter(!is.na(category))


# Much of the code is the same than the code above.

facet <- ggplot(facet_data, aes(rank, time, color = category)) +
  geom_segment(
    aes(x = rank, xend = rank, y = 0, yend = time), 
    size = 0.6
  ) +
  geom_rect(
    aes(xmin = 1, xmax = 501, ymin = 0, ymax = plus), 
    fill = "grey97", color = "grey97"
  ) + 
  geom_hline(aes(yintercept = (1 * 24 * 60 + plus)), color = "grey82", size = 0.2) +
  geom_hline(aes(yintercept = (7 * 24 * 60 + plus)), color = "grey79", size = 0.2) +
  geom_hline(aes(yintercept = (30 * 24 * 60 + plus)), color = "grey76", size = 0.2) +
  geom_hline(aes(yintercept = (365 * 24 * 60 + plus)), color = "grey73", size = 0.2) +
  geom_point(aes(size = time)) +
  
  # This is what adds the label within each circle
  geom_text(
    aes(label = cat_label, color = category),
    x = 500, y = 0,
    family = "Roboto Mono Medium",
    size = 2.5,
    lineheight = 0.87
  ) +
  # This is what wraps the panels for the categories into a layout of 2 rows
  facet_wrap(~ category, nrow = 2) +
  coord_polar() + 
  scale_y_log10(expand = c(0, 0)) + 
  rcartocolor::scale_color_carto_d(palette = "Prism", guide = "none") +
  scale_size(
    range = c(0.5, 7), 
    limits = c(plus, max(df_pw_plot$time)), 
    guide = "none"
  ) + 
  theme(
    strip.text = element_blank(), 
  )
  

# Customize the main panel (top-panel)
main <- main + 
  # This 'theme_void' adds a completely empty theme 
  theme_void() + 
  # These negative margins are VERY important to obtain a tight layout.
  # theme(
  #   plot.margin = margin(-50, -180, -70, -180, "lines"),
  # )
NULL
  
facet <- facet + 
  # Same theme_void for the lower panels
  theme_void() +
  # theme(
  #   # Negative spacing between panels, which means they overlap
  #   panel.spacing = unit(-8, "lines"),
  #   # Negative margin on top, to decrease blank space between these panels
  #   # and the main plot on top
  #   plot.margin = margin(-40, 50, 10, 50)
  # ) + 
  # # Adjust settings for the caption
  theme(
    plot.caption = element_text(
      family = "Roboto Mono Medium", 
      size = 20, 
      color = "grey60", 
      hjust = 5#, 
      # margin = margin(-50, 10, 30, 10)
    )
  ) + 
  # Add caption
  labs(caption = "Visualization by Cédric Scherer ∙ Data by Knowledge is Beautiful")


# Combine the two plots
# The '+' means to 'add' the two ggplot2 plots together.
panel <- (main + facet) + 
  plot_layout(
    ncol = 1, # Results in one plot on top and another on the bottom.
    heights = c(1, 0.28) # Height assigned to each plot
  )

panel
```

::: aside
Example from [The R Graph Gallery](https://r-graph-gallery.com/web-circular-lollipop-plot-with-ggplot2.html). 
:::



## 

![](images/napoleon.png)

::: aside
Image from [Wikipedia](https://en.wikipedia.org/wiki/File:Minard.png). 
:::


## 

```{r}
#| echo: false
#| eval: false

# Load dataset from github (Surfer project)
data <- read.table("https://github.com/holtzy/data_to_viz/raw/master/Example_dataset/19_MapConnection.csv", header=T, sep=",")

# Download NASA night lights image
download.file("https://raw.githubusercontent.com/holtzy/data_to_viz/master/story/IMG/BlackMarble_2016_01deg.jpg",  destfile = "sessions/Einführung/images/BlackMarble_2016_01deg.jpg", mode = "wb")

# Count how many times we have each unique connexion + order by importance
summary=data %>% 
  dplyr::count(homelat,homelon,homecontinent, travellat,travellon,travelcontinent) %>%
  arrange(n)

# A function that makes a dateframe per connection (we will use these connections to plot each lines)
data_for_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, group){
  inter <- geosphere::gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F)             
  inter=data.frame(inter)
  inter$group=NA
  diff_of_lon=abs(dep_lon) + abs(arr_lon)
  if(diff_of_lon > 180){
    inter$group[ which(inter$lon>=0)]=paste(group, "A",sep="")
    inter$group[ which(inter$lon<0)]=paste(group, "B",sep="")
  }else{
    inter$group=group
  }
  return(inter)
}

# Création d'un dataframe complet avec les points de toutes les lignes à faire.
data_ready_plot=data.frame()
for(i in c(1:nrow(summary))){
  tmp=data_for_connection(summary$homelon[i], summary$homelat[i], summary$travellon[i], summary$travellat[i] , i)
  tmp$homecontinent=summary$homecontinent[i]
  tmp$n=summary$n[i]
  data_ready_plot=rbind(data_ready_plot, tmp)
}
data_ready_plot$homecontinent=factor(data_ready_plot$homecontinent, levels=c("Asia","Europe","Australia","Africa","North America","South America","Antarctica"))

saveRDS(data_ready_plot, "./sessions/Einführung/surfdata.rds")

```

```{r}
#| echo: false

# Load picture and render
earth <- jpeg::readJPEG("images/worldmap.jpg", native = TRUE)
earth <- grid::rasterGrob(earth, interpolate = TRUE)

data_ready_plot <- readRDS("./surfdata.rds")
# Plot
p <- ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_line(data=data_ready_plot, aes(x=lon, y=lat, group=group, colour=homecontinent, alpha=n), size=0.3) +
  scale_color_brewer(palette="Set3") +
  theme_void() +
  theme(
        legend.position="none",
        panel.background = element_rect(fill = "black", colour = "black"), 
        panel.spacing=unit(c(0,0,0,0), "null"),
        plot.margin=grid::unit(c(0,0,0,0), "cm"),
  ) +
  ggplot2::annotate("text", x = -150, y = -45, hjust = 0, size = 8, label = paste("Where surfers travel."), color = "white") +
  ggplot2::annotate("text", x = -150, y = -51, hjust = 0, size = 5, label = paste("data-to-viz.com | NASA.gov | 10,000 #surf tweets recovered"), color = "white", alpha = 0.5) +
  #ggplot2::annotate("text", x = 160, y = -51, hjust = 1, size = 7, label = paste("Cacedédi Air-Guimzu 2018"), color = "white", alpha = 0.5) +
  xlim(-180,180) +
  ylim(-60,80) +
  scale_x_continuous(expand = c(0.006, 0.006)) +
  coord_equal() 

p
```


## 
https://r-graph-gallery.com/best-r-chart-examples
https://allisonhorst.com/r-packages-functions


## Example plot
```{r}
#| echo: false

library(ggplot2)
ggplot(data = cars, 
       mapping = aes(x = speed, y = dist)) +
  geom_point(colour = "#F4BA02", alpha = 1.5, size = 3) +
  theme_bg()
```



# Plotly

## gganimate

## Generative Art

## Step By Step example

